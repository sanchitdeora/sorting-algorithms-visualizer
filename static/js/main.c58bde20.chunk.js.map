{"version":3,"sources":["Algorithms/mergeSort.js","Algorithms/quickSort.js","Algorithms/heapSort.js","Visualizer/Visualizer.jsx","Algorithms/bubbleSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIndex","endIndex","middleIndex","Math","floor","k","i","j","push","doMerge","getQuickSort","sort","low","high","pi","pivot","temp","partition","getHeapSort","len","heapify","console","log","n","largest","l","r","ANIMATION_SPEED_MS","speedRating","Visualizer","props","state","NUMBER_OF_ARRAY_BARS","Speed","this","resetArray","speed","arrayBars","document","getElementsByClassName","style","backgroundColor","random","setState","className","color","id","onClick","prepReset","type","min","max","defaultValue","step","value","onChange","e","x","parseInt","target","y","speedAssign","speedRate","mergeSort","quickSort","heapSort","bubbleSort","map","index","key","height","val","list","getElementById","pointerEvents","button","enable_disable","Merge","barOneIndex","barTwoIndex","barOneStyle","barTwoStyle","setTimeout","newHeight","removeProperty","Quick","message","barStyle","newHeight1","newHeight2","Heap","parent","compare","limit","barParentIndex","barIndex","barParentStyle","Bubble","color1","color2","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.c58bde20.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) \r\n    return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIndex,\r\n  endIndex,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  if (startIndex === endIndex) \r\n    return;\r\n  const middleIndex = Math.floor((startIndex + endIndex) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIndex, middleIndex, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIndex + 1, endIndex, mainArray, animations);\r\n  doMerge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIndex,\r\n  middleIndex,\r\n  endIndex,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  let k = startIndex;\r\n  let i = startIndex;\r\n  let j = middleIndex + 1;\r\n  while (i <= middleIndex && j <= endIndex) {\r\n    animations.push([i, j]);\r\n    animations.push([i, j]);\r\n\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } \r\n    else {\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIndex) {\r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n    animations.push([k, auxiliaryArray[i]]);\r\n\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIndex) {\r\n    animations.push([j, j]);\r\n    animations.push([j, j]);\r\n    animations.push([k, auxiliaryArray[j]]);\r\n\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}","export function getQuickSort(array) {\r\n    const auxiliaryArray = array.slice();\r\n    const animations = [];\r\n    sort(animations, auxiliaryArray, 0, array.length - 1);\r\n    return animations;\r\n}\r\n\r\nfunction sort(animations, auxiliaryArray, low, high) {\r\n    if(low < high) {\r\n        const pi = partition(animations, auxiliaryArray, low, high);\r\n        sort(animations, auxiliaryArray, low, (pi - 1));\r\n        sort(animations, auxiliaryArray, (pi + 1), high);\r\n    }\r\n    else if (low === high) {\r\n        animations.push([\"SwapPivot\", [auxiliaryArray[low], auxiliaryArray[low], low, low]]);\r\n    }\r\n}\r\n\r\nfunction partition(animations, auxiliaryArray, low, high) {\r\n    const pivot = auxiliaryArray[low];\r\n    animations.push([\"Pivot\", low]);\r\n    var i = low;\r\n    var temp;\r\n    for(let j = low + 1; j <= high; j ++) {\r\n        animations.push([\"Compare\", j])\r\n        if(auxiliaryArray[j] <= pivot) {\r\n            i = i + 1;\r\n            temp = auxiliaryArray[i];\r\n            auxiliaryArray[i] = auxiliaryArray[j];\r\n            auxiliaryArray[j] = temp;\r\n            animations.push([\"Swap\", [auxiliaryArray[i], auxiliaryArray[j], i, j]]);\r\n        } else \r\n        // animations.push([i, j]);\r\n            animations.push([\"Reset\", j])\r\n    }\r\n    temp = auxiliaryArray[i];\r\n    auxiliaryArray[i] = auxiliaryArray[low];\r\n    auxiliaryArray[low] = temp;\r\n    animations.push([\"SwapPivot\", [auxiliaryArray[i], auxiliaryArray[low], i, low]]);\r\n    return i;\r\n}","export function getHeapSort(array) {\r\n    const auxiliaryArray = array.slice(0);\r\n    const animations = [];\r\n    sort(animations, auxiliaryArray);\r\n    console.log(animations);\r\n    return animations;\r\n}\r\n\r\nfunction sort(animations, auxiliaryArray) {\r\n    const len = auxiliaryArray.length;\r\n    var temp;\r\n    for(let i = Math.floor((len / 2) - 1); i >= 0; i --) {\r\n        \r\n        heapify(animations, auxiliaryArray, len, i);\r\n    }\r\n\r\n    for(let i = len - 1; i >= 0; i --) {\r\n        temp = auxiliaryArray[i];\r\n        auxiliaryArray[i] = auxiliaryArray[0];\r\n        auxiliaryArray[0] = temp;\r\n        \r\n        animations.push([\"SwapLargest\", [auxiliaryArray[0], auxiliaryArray[i], 0, i]]);\r\n        heapify(animations, auxiliaryArray, i, 0);\r\n    }\r\n}\r\n\r\nfunction heapify(animations, auxiliaryArray, n, i) {\r\n    var temp;\r\n    var largest = i;\r\n    var l = (i * 2) + 1;\r\n    var r = (i * 2) + 2;\r\n    animations.push([\"Parent\", i]);\r\n    animations.push([\"Compare\", [l, n]]);\r\n    if(l < n && auxiliaryArray[l] > auxiliaryArray[largest]){\r\n        largest = l;\r\n    }\r\n    animations.push([\"Compare\", [r, n]]);\r\n    if(r < n && auxiliaryArray[r] > auxiliaryArray[largest]){\r\n        largest = r;\r\n    }\r\n\r\n    if(largest !== i) {\r\n        temp = auxiliaryArray[largest];\r\n        auxiliaryArray[largest] = auxiliaryArray[i];\r\n        auxiliaryArray[i] = temp;\r\n\r\n        animations.push([\"Swap\", [auxiliaryArray[largest], auxiliaryArray[i], largest, i]]);\r\n        if(l < n)\r\n            animations.push([\"Reset\", [i, l]]);\r\n        if(r < n)\r\n            animations.push([\"Reset\", [i, r]]);\r\n\r\n        heapify(animations, auxiliaryArray, n, largest);\r\n    }\r\n\r\n    if(l < n)\r\n        animations.push([\"Reset\", [i, l]]);\r\n    if(r < n)\r\n        animations.push([\"Reset\", [i, r]]);\r\n}\r\n","import React from 'react';\r\nimport * as Merge from '../Algorithms/mergeSort.js'\r\nimport * as Bubble from '../Algorithms/bubbleSort.js'\r\nimport * as Quick from '../Algorithms/quickSort.js'\r\nimport * as Heap from '../Algorithms/heapSort.js'\r\n\r\nimport './Visualizer.css';\r\n\r\n// Change this value for the speed of the animations.\r\nvar ANIMATION_SPEED_MS = 10;\r\n\r\n// Set MAX and MIN range for the array values\r\nconst MAX  = 350;\r\nconst MIN = 15;\r\n\r\n// Main Color of the Sorted Values \r\nconst PRIMARY_COLOR = '#1da1f2';\r\n\r\n// Color when compared\r\nconst SECONDARY_COLOR = 'white';\r\n\r\n// Default Color\r\nconst DEFAULT_COLOR = 'darkgrey';\r\n\r\n// Color to show visited in that iteration\r\nconst INTERMEDIATE_COLOR = 'darkcyan';\r\n\r\n// Color to focus on a particular position like pivot\r\nconst HIGHLIGHT_COLOR = 'yellow';\r\n\r\n// Speed Values in String\r\nvar speedRating = \"Average\";\r\n\r\nexport default class Visualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n            NUMBER_OF_ARRAY_BARS: 50,\r\n            Speed: 3\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    // Assigns Delay in code per Animation\r\n    speedAssign(speed) {\r\n        switch(speed){\r\n            case 1: ANIMATION_SPEED_MS = 2000; break;\r\n            case 2: ANIMATION_SPEED_MS = 1000; break;\r\n            case 3: ANIMATION_SPEED_MS = 500; break;\r\n            case 4: ANIMATION_SPEED_MS = 50; break;\r\n            case 5: ANIMATION_SPEED_MS = 1; break;\r\n            default: console.log(\"Error\");  \r\n        }\r\n    }\r\n\r\n    // Rates the Speed in String\r\n    speedRate(speed)\r\n    {\r\n        switch(speed){\r\n            case 1: speedRating = \"Slower\"; break;\r\n            case 2: speedRating = \"Slow\"; break;\r\n            case 3: speedRating = \"Average\"; break;\r\n            case 4: speedRating = \"Fast\"; break;\r\n            case 5: speedRating = \"Faster\"; break; \r\n            default: console.log(\"Error\");\r\n        }\r\n    }\r\n\r\n    // Resets Array and changes to Default Color\r\n    prepReset() {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for (let i = 0; i < arrayBars.length; i ++)\r\n            arrayBars[i].style.backgroundColor = DEFAULT_COLOR;\r\n        this.resetArray();\r\n    }\r\n\r\n    // Resets the array in State\r\n    resetArray() {\r\n        const array = [];\r\n        for(let i = 0; i < this.state.NUMBER_OF_ARRAY_BARS; i ++) {\r\n            array.push(Math.floor(Math.random() * MAX + MIN));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n        var length;\r\n        var speed;\r\n        return (\r\n            <div className = \"html-container\">\r\n                <h2 style={{color: \"#1da1f2\"}}>SORTING ALGORITHMS VISUALIZER</h2>\r\n                <nav className = \"button-container\">\r\n                        <li id = \"randomize\">\r\n                            <p id =\"random\"onClick = {() => this.prepReset()}>Randomize Array!</p>\r\n                        </li>\r\n\r\n\r\n                        <li id = \"slider1\">\r\n                                <label>Length </label>\r\n                                <input type=\"range\" min={4} max={100} defaultValue=\"50\" step=\"1\" value={length}  \r\n                                onChange={e => {\r\n                                    const x = parseInt(e.target.value, 10);\r\n                                    console.log(x+\"Here\");\r\n                                    this.setState((state) => ({ NUMBER_OF_ARRAY_BARS: x}));\r\n                                    this.prepReset()\r\n                                }}\r\n                                id=\"sliderL\"/>\r\n                                <span className=\"tooltip1\">{this.state.array.length}</span>\r\n                        </li>\r\n\r\n                        <li id = \"slider2\">\r\n                                <label>Speed</label>\r\n                                <input type=\"range\" min=\"1\" max=\"5\" defaultValue=\"3\" step=\"1\"  value={speed}\r\n                                onChange={e => {\r\n                                    const y = parseInt(e.target.value, 10);\r\n                                    console.log(y+\"Here123\");\r\n                                    this.setState((state) => ({ Speed: y}));\r\n                                    this.speedAssign(y);\r\n                                    this.speedRate(y);\r\n                                }}\r\n                                id=\"sliderS\"/>\r\n                                <span className=\"tooltip1\">{speedRating}</span>\r\n                        </li>\r\n\r\n\r\n                        <li id = \"sorting-buttons\">\r\n                            <p id = \"merge\" onClick = {() => this.mergeSort()}>Merge Sort <span className=\"tooltipMerge\"><b>Time Complexity</b>\r\n                            <br></br>Best Case: Ω(nlogn)<br></br>Average Case: θ(nlogn)<br></br>Worst Case: O(nlogn)</span></p>\r\n\r\n                            <p id = \"quick\" onClick = {() => this.quickSort()}>Quick Sort <span className=\"tooltipQuick\"><b>Time Complexity</b>\r\n                            <br></br>Best Case: Ω(nlogn)<br></br>Average Case: θ(nlogn)<br></br>Worst Case: O(n<sup>2</sup>)</span></p>\r\n                            \r\n                            <p id = \"heap\" onClick = {() => this.heapSort()}>Heap Sort <span className=\"tooltipHeap\"><b>Time Complexity</b>\r\n                            <br></br>Best Case: Ω(nlogn)<br></br>Average Case: θ(nlogn)<br></br>Worst Case: O(nlogn)</span></p>\r\n                            \r\n                            <p id = \"bubble\" onClick = {() => this.bubbleSort()}>Bubble Sort <span className=\"tooltipBubble\"><b>Time Complexity</b>\r\n                            <br></br>Best Case: Ω(n)<br></br>Average Case: θ(n<sup>2</sup>)<br></br>Worst Case: O(n<sup>2</sup>)</span></p>\r\n                            {/* <button onClick = {() => this.testing()}>Testing</button> */}\r\n                        </li>\r\n                </nav>\r\n\r\n                <div className = \"array-container\">\r\n\r\n                {array.map((value, index) => (\r\n                    <div className = \"array-bar\" key = {index} style = {{height: `${value}px`}}></div>\r\n                ))}\r\n                </div>\r\n            </div>    \r\n            \r\n        );\r\n    }  \r\n\r\n    // To enable and disable buttons while in progress\r\n    enable_disable(val) {\r\n        const list = [\"random\", \"merge\", \"quick\", \"heap\", \"bubble\", \"sliderL\", \"sliderS\"];\r\n        for (let i = 0; i < list.length; i ++) {\r\n                document.getElementById(list[i]).style.pointerEvents = val;\r\n        }\r\n    }\r\n\r\n    // Merge Sort\r\n    mergeSort() {\r\n        const button = document.getElementById(\"merge\").style;\r\n        button.backgroundColor = \"#1da1f2\";\r\n        button.color = \"white\";\r\n        this.enable_disable(\"none\");\r\n        const animations = Merge.getMergeSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {    \r\n            const [barOneIndex, barTwoIndex] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIndex].style;\r\n            const barTwoStyle = arrayBars[barTwoIndex].style;\r\n            const color = i % 3 === 0 ? SECONDARY_COLOR : INTERMEDIATE_COLOR;\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n            }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n            setTimeout(() => {\r\n                const [barOneIndex, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                barOneStyle.height = `${newHeight}px`;\r\n            }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for (let i = 0; i < arrayBars.length; i ++)\r\n            arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\r\n        button.removeProperty(\"background-color\");\r\n        button.removeProperty(\"color\");\r\n\r\n        this.enable_disable(\"auto\");\r\n        }, animations.length * ANIMATION_SPEED_MS);\r\n\r\n        \r\n    }\r\n\r\n    // Quick Sort\r\n    quickSort() {\r\n        const button = document.getElementById(\"quick\").style;\r\n        button.backgroundColor = \"#1da1f2\";\r\n        button.color = \"white\";\r\n        this.enable_disable(\"none\");\r\n        const animations = Quick.getQuickSort(this.state.array);\r\n        for(let i = 0; i < animations.length; i ++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const [message, value] = animations[i];\r\n            if (message === \"Pivot\") {\r\n                const pivot = value;\r\n                const barStyle = arrayBars[pivot].style;\r\n                setTimeout(() => {\r\n                    barStyle.backgroundColor = HIGHLIGHT_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else if (message === \"Compare\") {\r\n                const compare = value;\r\n                const barStyle = arrayBars[compare].style;\r\n                setTimeout(() => {\r\n                    barStyle.backgroundColor = SECONDARY_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else if (message === \"Swap\") {\r\n                const [newHeight1, newHeight2, barOneIndex, barTwoIndex] = value;\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n                    barOneStyle.height = `${newHeight1}px`;\r\n                    barTwoStyle.height = `${newHeight2}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n                setTimeout(() => {\r\n                    barTwoStyle.backgroundColor = DEFAULT_COLOR;\r\n                    barOneStyle.backgroundColor = INTERMEDIATE_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n\r\n            }\r\n            else if (message === \"SwapPivot\") {\r\n                const [newHeight1, newHeight2, barOneIndex, barTwoIndex] = value;\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barTwoStyle.backgroundColor = INTERMEDIATE_COLOR;\r\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n                    barOneStyle.height = `${newHeight1}px`;\r\n                    barTwoStyle.height = `${newHeight2}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else if (message === \"Reset\") {\r\n                const reset = value;\r\n                const barStyle = arrayBars[reset].style;\r\n                setTimeout(() => {\r\n                    barStyle.backgroundColor = DEFAULT_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            setTimeout(() => {\r\n                const arrayBars = document.getElementsByClassName('array-bar');\r\n                for (let i = 0; i < arrayBars.length; i ++)\r\n                    arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\r\n                button.removeProperty(\"background-color\");\r\n                button.removeProperty(\"color\");\r\n                this.enable_disable(\"auto\");\r\n                }, animations.length * ANIMATION_SPEED_MS);\r\n        }\r\n    }\r\n\r\n    // Heap Sort\r\n    heapSort() {\r\n        const button = document.getElementById(\"heap\").style;\r\n        button.backgroundColor = \"#1da1f2\";\r\n        button.color = \"white\";\r\n        this.enable_disable(\"none\");\r\n        const animations = Heap.getHeapSort(this.state.array);\r\n        for( let i = 0; i < animations.length; i ++ ) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const [message, value] = animations[i];\r\n            if(message === \"Parent\") {\r\n                const parent = value;\r\n                const barStyle = arrayBars[parent].style;\r\n                setTimeout(() => {\r\n                    console.log(\"Parent Chosen\"+parent);\r\n                    barStyle.backgroundColor = HIGHLIGHT_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else if(message === \"Compare\") {\r\n                const [compare, limit] = value;\r\n                if(compare < limit){\r\n                    const barStyle = arrayBars[compare].style;\r\n                    setTimeout(() => {\r\n                        console.log(\"Compare with\"+compare);\r\n                        barStyle.backgroundColor = SECONDARY_COLOR;\r\n                    }, i * ANIMATION_SPEED_MS);\r\n                }\r\n                \r\n            }\r\n            else if (message === \"Swap\") {\r\n                const [newHeight1, newHeight2, barOneIndex, barTwoIndex] = value;\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n                    console.log(\"Swapping with: \"+barOneIndex+\"\\t\"+barTwoIndex);\r\n                    barOneStyle.height = `${newHeight1}px`;\r\n                    barTwoStyle.height = `${newHeight2}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n                setTimeout(() => {\r\n                    barTwoStyle.backgroundColor = INTERMEDIATE_COLOR;\r\n                    barOneStyle.backgroundColor = INTERMEDIATE_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n\r\n            }\r\n            else if (message === \"Reset\") {\r\n                const [barParentIndex, barIndex] = value;\r\n                const barParentStyle = arrayBars[barParentIndex].style;\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    if(barStyle.backgroundColor !== 'darkcyan'){\r\n                        barStyle.backgroundColor = DEFAULT_COLOR;\r\n                    }\r\n                    if(barParentStyle.backgroundColor !== 'darkcyan'){\r\n                        barParentStyle.backgroundColor = DEFAULT_COLOR;                    \r\n                    }\r\n                        \r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else if (message === \"SwapLargest\") {\r\n                const [newHeight1, newHeight2, barOneIndex, barTwoIndex] = value;\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n                    console.log(\"Final Swapping with: \"+barOneIndex+\"\\t\"+barTwoIndex);\r\n                    barOneStyle.height = `${newHeight1}px`;\r\n                    barTwoStyle.height = `${newHeight2}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n                setTimeout(() => {\r\n                    barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n                    barOneStyle.backgroundColor = INTERMEDIATE_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            setTimeout(() => {\r\n                const arrayBars = document.getElementsByClassName('array-bar');\r\n                for (let i = 0; i < arrayBars.length; i ++)\r\n                    arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\r\n                button.removeProperty(\"background-color\");\r\n                button.removeProperty(\"color\");\r\n                this.enable_disable(\"auto\");\r\n                }, animations.length * ANIMATION_SPEED_MS);\r\n        }\r\n    }\r\n\r\n    //Bubble Sort\r\n    bubbleSort() {\r\n        const button = document.getElementById(\"bubble\").style;\r\n        button.backgroundColor = \"#1da1f2\";\r\n        button.color = \"white\";\r\n        this.enable_disable(\"none\");\r\n        const animations = Bubble.getBubbleSort(this.state.array);\r\n        var len = (this.state.array.length - 1);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 1;\r\n            if (isColorChange) {\r\n                const [barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                const color1 = i % 3 === 0 ? SECONDARY_COLOR : INTERMEDIATE_COLOR;\r\n                const color2 = i % 3 === 0 ? SECONDARY_COLOR : INTERMEDIATE_COLOR;                \r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color1;\r\n                    barTwoStyle.backgroundColor = color2;\r\n                    if (i % 3 === 2 && barTwoIndex === len) {\r\n                        len --;\r\n                        barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n                        if(len === 0)\r\n                            barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n                    }\r\n                    \r\n                  }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [newHeight1, newHeight2] = animations[i];\r\n                    const [barOneIndex, barTwoIndex] = animations[i + 1];\r\n                    const barOneStyle = arrayBars[barOneIndex].style;\r\n                    const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                    barOneStyle.height = `${newHeight1}px`;\r\n                    barTwoStyle.height = `${newHeight2}px`;\r\n                  }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            setTimeout(() => {\r\n                const arrayBars = document.getElementsByClassName('array-bar');\r\n                for (let i = 0; i < arrayBars.length; i ++)\r\n                    arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\r\n                button.removeProperty(\"background-color\");\r\n                button.removeProperty(\"color\");\r\n                this.enable_disable(\"auto\");\r\n                }, animations.length * ANIMATION_SPEED_MS);\r\n        }\r\n    }\r\n\r\n    // testing() {\r\n    //     var max = 1000;\r\n    //     for (let i = 0; i < 1000; i ++){\r\n    //         const arrayTest = [];\r\n    //         const len = Math.floor(Math.random() * max + 1);\r\n    //         for (let j = 0; j < len; j ++){\r\n    //             arrayTest.push(Math.floor(Math.random() * max));\r\n    //         }\r\n    //         // console.log(\"arrayTest\");\r\n    //         // console.log(arrayTest);\r\n    //         const jsarray = arrayTest.slice().sort((a, b) => a - b);\r\n    //         const sortedArray = Heap.getHeapSort(arrayTest);\r\n    //         // console.log(jsarray);\r\n    //         // console.log(sortedArray);\r\n    //         console.log(ifEqual(jsarray, sortedArray));\r\n    //     }\r\n    // }\r\n}\r\n\r\n// function ifEqual(arr1, arr2) {\r\n//     if (arr1.length !== arr2.length) \r\n//         return false;\r\n//     for (let i = 0; i < arr1.length; i ++){\r\n//         if(arr1[i] !== arr2[i])\r\n//         return false;\r\n//     }\r\n//     return true;\r\n// }","export function getBubbleSort(array) {\r\n    const auxiliaryArray = array.slice();\r\n    const animations = [];\r\n    console.log(auxiliaryArray);\r\n    const length = array.length;\r\n    var temp;\r\n    for (let i = 0; i < length - 1; i ++) {\r\n        for (let j = 0; j < length - i - 1; j ++) {\r\n            animations.push([j, (j +1)]);\r\n            if (auxiliaryArray[j] > auxiliaryArray[j + 1]) {\r\n                temp = auxiliaryArray[j];\r\n                auxiliaryArray[j] = auxiliaryArray[j + 1];\r\n                auxiliaryArray[j + 1] = temp;\r\n            }\r\n            animations.push([auxiliaryArray[j], auxiliaryArray[j + 1]]);\r\n            animations.push([j, j + 1]);\r\n        }\r\n        // animations.push([\"End of Iteration\", length - 1 - i]);\r\n    }\r\n    console.log(animations);\r\n    return animations;\r\n}","import React from 'react';\nimport Visualizer from './Visualizer/Visualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Visualizer></Visualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}