{"ast":null,"code":"var _jsxFileName = \"C:\\\\Sanchit\\\\Projects\\\\sorting-algorithms-visualizer\\\\src\\\\Visualizer\\\\Visualizer.jsx\";\nimport React from 'react';\nimport * as Merge from '../Algorithms/mergeSort.js';\nimport * as Bubble from '../Algorithms/bubbleSort.js';\nimport * as Quick from '../Algorithms/quickSort.js';\nimport * as Heap from '../Algorithms/heapSort.js';\nimport './Visualizer.css'; // Change this value for the speed of the animations.\n\nvar ANIMATION_SPEED_MS = 10; // Set MAX and MIN range for the array values\n\nconst MAX = 350;\nconst MIN = 15; // Main Color of the Sorted Values \n\nconst PRIMARY_COLOR = '#1da1f2'; // Color when compared\n\nconst SECONDARY_COLOR = 'white'; // Default Color\n\nconst DEFAULT_COLOR = 'darkgrey'; // Color to show visited in that iteration\n\nconst INTERMEDIATE_COLOR = 'darkcyan'; // Color to focus on a particular position like pivot\n\nconst HIGHLIGHT_COLOR = 'yellow'; // Speed Values in String\n\nvar speedRating = \"Average\";\nexport default class Visualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n      NUMBER_OF_ARRAY_BARS: 50,\n      Speed: 3\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  } // Assigns Delay in code per Animation\n\n\n  speedAssign(speed) {\n    switch (speed) {\n      case 1:\n        ANIMATION_SPEED_MS = 2000;\n        break;\n\n      case 2:\n        ANIMATION_SPEED_MS = 1000;\n        break;\n\n      case 3:\n        ANIMATION_SPEED_MS = 500;\n        break;\n\n      case 4:\n        ANIMATION_SPEED_MS = 50;\n        break;\n\n      case 5:\n        ANIMATION_SPEED_MS = 1;\n        break;\n\n      default:\n        console.log(\"Error\");\n    }\n  } // Rates the Speed in String\n\n\n  speedRate(speed) {\n    switch (speed) {\n      case 1:\n        speedRating = \"Slower\";\n        break;\n\n      case 2:\n        speedRating = \"Slow\";\n        break;\n\n      case 3:\n        speedRating = \"Average\";\n        break;\n\n      case 4:\n        speedRating = \"Fast\";\n        break;\n\n      case 5:\n        speedRating = \"Faster\";\n        break;\n\n      default:\n        console.log(\"Error\");\n    }\n  } // Resets Array and changes to Default Color\n\n\n  prepReset() {\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    for (let i = 0; i < arrayBars.length; i++) arrayBars[i].style.backgroundColor = DEFAULT_COLOR;\n\n    this.resetArray();\n  } // Resets the array in State\n\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < this.state.NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(Math.floor(Math.random() * MAX + MIN));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    var length;\n    var speed;\n    return React.createElement(\"div\", {\n      className: \"html-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      style: {\n        color: \"#1da1f2\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"SORTING ALGORITHMS VISUALIZER\"), React.createElement(\"nav\", {\n      className: \"button-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      id: \"randomize\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      id: \"random\",\n      onClick: () => this.prepReset(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Randomize Array!\")), React.createElement(\"li\", {\n      id: \"slider1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Length \"), React.createElement(\"input\", {\n      type: \"range\",\n      min: 4,\n      max: 100,\n      defaultValue: \"50\",\n      step: \"1\",\n      value: length,\n      onChange: e => {\n        const x = parseInt(e.target.value, 10);\n        console.log(x + \"Here\");\n        this.setState(state => ({\n          NUMBER_OF_ARRAY_BARS: x\n        }));\n        this.prepReset();\n      },\n      id: \"sliderL\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"tooltip1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, this.state.array.length)), React.createElement(\"li\", {\n      id: \"slider2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Speed\"), React.createElement(\"input\", {\n      type: \"range\",\n      min: \"1\",\n      max: \"5\",\n      defaultValue: \"3\",\n      step: \"1\",\n      value: speed,\n      onChange: e => {\n        const y = parseInt(e.target.value, 10);\n        console.log(y + \"Here123\");\n        this.setState(state => ({\n          Speed: y\n        }));\n        this.speedAssign(y);\n        this.speedRate(y);\n      },\n      id: \"sliderS\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"tooltip1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, speedRating)), React.createElement(\"li\", {\n      id: \"sorting-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      id: \"merge\",\n      onClick: () => this.mergeSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Merge Sort \", React.createElement(\"span\", {\n      className: \"tooltipMerge\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Time Complexity\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), \"Best Case: \\u2126(nlogn)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), \"Average Case: \\u03B8(nlogn)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), \"Worst Case: O(nlogn)\")), React.createElement(\"p\", {\n      id: \"quick\",\n      onClick: () => this.quickSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Quick Sort \", React.createElement(\"span\", {\n      className: \"tooltipQuick\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Time Complexity\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }), \"Best Case: \\u2126(nlogn)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }), \"Average Case: \\u03B8(nlogn)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }), \"Worst Case: O(n\", React.createElement(\"sup\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"2\"), \")\")), React.createElement(\"p\", {\n      id: \"heap\",\n      onClick: () => this.heapSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Heap Sort \", React.createElement(\"span\", {\n      className: \"tooltipHeap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Time Complexity\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), \"Best Case: \\u2126(nlogn)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), \"Average Case: \\u03B8(nlogn)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), \"Worst Case: O(nlogn)\")), React.createElement(\"p\", {\n      id: \"bubble\",\n      onClick: () => this.bubbleSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Bubble Sort \", React.createElement(\"span\", {\n      className: \"tooltipBubble\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Time Complexity\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), \"Best Case: \\u2126(n)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), \"Average Case: \\u03B8(n\", React.createElement(\"sup\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"2\"), \")\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), \"Worst Case: O(n\", React.createElement(\"sup\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"2\"), \")\")))), React.createElement(\"div\", {\n      className: \"array-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, array.map((value, index) => React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: index,\n      style: {\n        height: `${value}px`\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }))));\n  }\n\n  enable_disable(val) {\n    const list = [\"random\", \"merge\", \"quick\", \"heap\", \"bubble\", \"sliderL\", \"sliderS\"];\n\n    for (let i = 0; i < list.length; i++) {\n      document.getElementById(list[i]).style.pointerEvents = val;\n    }\n  } // Merge Sort\n\n\n  mergeSort() {\n    const button = document.getElementById(\"merge\").style;\n    button.backgroundColor = \"#1da1f2\";\n    button.color = \"white\";\n    this.enable_disable(\"none\");\n    const animations = Merge.getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : INTERMEDIATE_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIndex, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIndex].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n\n    setTimeout(() => {\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      for (let i = 0; i < arrayBars.length; i++) arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n\n      button.removeProperty(\"background-color\");\n      button.removeProperty(\"color\");\n      this.enable_disable(\"auto\");\n    }, animations.length * ANIMATION_SPEED_MS);\n  } // Quick Sort\n\n\n  quickSort() {\n    const button = document.getElementById(\"quick\").style;\n    button.backgroundColor = \"#1da1f2\";\n    button.color = \"white\";\n    this.enable_disable(\"none\");\n    const animations = Quick.getQuickSort(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [message, value] = animations[i];\n\n      if (message === \"Pivot\") {\n        const pivot = value;\n        const barStyle = arrayBars[pivot].style;\n        setTimeout(() => {\n          barStyle.backgroundColor = HIGHLIGHT_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (message === \"Compare\") {\n        const compare = value;\n        const barStyle = arrayBars[compare].style;\n        setTimeout(() => {\n          barStyle.backgroundColor = SECONDARY_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (message === \"Swap\") {\n        const [newHeight1, newHeight2, barOneIndex, barTwoIndex] = value;\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SECONDARY_COLOR;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n          barOneStyle.height = `${newHeight1}px`;\n          barTwoStyle.height = `${newHeight2}px`;\n        }, i * ANIMATION_SPEED_MS);\n        setTimeout(() => {\n          barTwoStyle.backgroundColor = DEFAULT_COLOR;\n          barOneStyle.backgroundColor = INTERMEDIATE_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (message === \"SwapPivot\") {\n        const [newHeight1, newHeight2, barOneIndex, barTwoIndex] = value;\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barTwoStyle.backgroundColor = INTERMEDIATE_COLOR;\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\n          barOneStyle.height = `${newHeight1}px`;\n          barTwoStyle.height = `${newHeight2}px`;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (message === \"Reset\") {\n        const reset = value;\n        const barStyle = arrayBars[reset].style;\n        setTimeout(() => {\n          barStyle.backgroundColor = DEFAULT_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n\n      setTimeout(() => {\n        const arrayBars = document.getElementsByClassName('array-bar');\n\n        for (let i = 0; i < arrayBars.length; i++) arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n\n        button.removeProperty(\"background-color\");\n        button.removeProperty(\"color\");\n        this.enable_disable(\"auto\");\n      }, animations.length * ANIMATION_SPEED_MS);\n    }\n  } // Heap Sort\n\n\n  heapSort() {\n    const button = document.getElementById(\"heap\").style;\n    button.backgroundColor = \"#1da1f2\";\n    button.color = \"white\";\n    this.enable_disable(\"none\");\n    const animations = Heap.getHeapSort(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [message, value] = animations[i];\n\n      if (message === \"Parent\") {\n        const parent = value;\n        const barStyle = arrayBars[parent].style;\n        setTimeout(() => {\n          console.log(\"Parent Chosen\" + parent);\n          barStyle.backgroundColor = HIGHLIGHT_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (message === \"Compare\") {\n        const [compare, limit] = value;\n\n        if (compare < limit) {\n          const barStyle = arrayBars[compare].style;\n          setTimeout(() => {\n            console.log(\"Compare with\" + compare);\n            barStyle.backgroundColor = SECONDARY_COLOR;\n          }, i * ANIMATION_SPEED_MS);\n        }\n      } else if (message === \"Swap\") {\n        const [newHeight1, newHeight2, barOneIndex, barTwoIndex] = value;\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SECONDARY_COLOR;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n          console.log(\"Swapping with: \" + barOneIndex + \"\\t\" + barTwoIndex);\n          barOneStyle.height = `${newHeight1}px`;\n          barTwoStyle.height = `${newHeight2}px`;\n        }, i * ANIMATION_SPEED_MS);\n        setTimeout(() => {\n          barTwoStyle.backgroundColor = INTERMEDIATE_COLOR;\n          barOneStyle.backgroundColor = INTERMEDIATE_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (message === \"Reset\") {\n        const [barParentIndex, barIndex] = value;\n        const barParentStyle = arrayBars[barParentIndex].style;\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          if (barStyle.backgroundColor !== 'darkcyan') {\n            barStyle.backgroundColor = DEFAULT_COLOR;\n          }\n\n          if (barParentStyle.backgroundColor !== 'darkcyan') {\n            barParentStyle.backgroundColor = DEFAULT_COLOR;\n          }\n        }, i * ANIMATION_SPEED_MS);\n      } else if (message === \"SwapLargest\") {\n        const [newHeight1, newHeight2, barOneIndex, barTwoIndex] = value;\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SECONDARY_COLOR;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n          console.log(\"Final Swapping with: \" + barOneIndex + \"\\t\" + barTwoIndex);\n          barOneStyle.height = `${newHeight1}px`;\n          barTwoStyle.height = `${newHeight2}px`;\n        }, i * ANIMATION_SPEED_MS);\n        setTimeout(() => {\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\n          barOneStyle.backgroundColor = INTERMEDIATE_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n\n      setTimeout(() => {\n        const arrayBars = document.getElementsByClassName('array-bar');\n\n        for (let i = 0; i < arrayBars.length; i++) arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n\n        button.removeProperty(\"background-color\");\n        button.removeProperty(\"color\");\n        this.enable_disable(\"auto\");\n      }, animations.length * ANIMATION_SPEED_MS);\n    }\n  } //Bubble Sort\n\n\n  bubbleSort() {\n    const button = document.getElementById(\"bubble\").style;\n    button.backgroundColor = \"#1da1f2\";\n    button.color = \"white\";\n    this.enable_disable(\"none\");\n    const animations = Bubble.getBubbleSort(this.state.array);\n    var len = this.state.array.length - 1;\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 1;\n\n      if (isColorChange) {\n        const [barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        const color1 = i % 3 === 0 ? SECONDARY_COLOR : INTERMEDIATE_COLOR;\n        const color2 = i % 3 === 0 ? SECONDARY_COLOR : INTERMEDIATE_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color1;\n          barTwoStyle.backgroundColor = color2;\n\n          if (i % 3 === 2 && barTwoIndex === len) {\n            len--;\n            barTwoStyle.backgroundColor = PRIMARY_COLOR;\n            if (len === 0) barOneStyle.backgroundColor = PRIMARY_COLOR;\n          }\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [newHeight1, newHeight2] = animations[i];\n          const [barOneIndex, barTwoIndex] = animations[i + 1];\n          const barOneStyle = arrayBars[barOneIndex].style;\n          const barTwoStyle = arrayBars[barTwoIndex].style;\n          barOneStyle.height = `${newHeight1}px`;\n          barTwoStyle.height = `${newHeight2}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n\n      setTimeout(() => {\n        const arrayBars = document.getElementsByClassName('array-bar');\n\n        for (let i = 0; i < arrayBars.length; i++) arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n\n        button.removeProperty(\"background-color\");\n        button.removeProperty(\"color\");\n        this.enable_disable(\"auto\");\n      }, animations.length * ANIMATION_SPEED_MS);\n    }\n  } // testing() {\n  //     var max = 1000;\n  //     for (let i = 0; i < 1000; i ++){\n  //         const arrayTest = [];\n  //         const len = Math.floor(Math.random() * max + 1);\n  //         for (let j = 0; j < len; j ++){\n  //             arrayTest.push(Math.floor(Math.random() * max));\n  //         }\n  //         // console.log(\"arrayTest\");\n  //         // console.log(arrayTest);\n  //         const jsarray = arrayTest.slice().sort((a, b) => a - b);\n  //         const sortedArray = Heap.getHeapSort(arrayTest);\n  //         // console.log(jsarray);\n  //         // console.log(sortedArray);\n  //         console.log(ifEqual(jsarray, sortedArray));\n  //     }\n  // }\n\n\n} // function ifEqual(arr1, arr2) {\n//     if (arr1.length !== arr2.length) \n//         return false;\n//     for (let i = 0; i < arr1.length; i ++){\n//         if(arr1[i] !== arr2[i])\n//         return false;\n//     }\n//     return true;\n// }","map":{"version":3,"sources":["C:/Sanchit/Projects/sorting-algorithms-visualizer/src/Visualizer/Visualizer.jsx"],"names":["React","Merge","Bubble","Quick","Heap","ANIMATION_SPEED_MS","MAX","MIN","PRIMARY_COLOR","SECONDARY_COLOR","DEFAULT_COLOR","INTERMEDIATE_COLOR","HIGHLIGHT_COLOR","speedRating","Visualizer","Component","constructor","props","state","array","NUMBER_OF_ARRAY_BARS","Speed","componentDidMount","resetArray","speedAssign","speed","console","log","speedRate","prepReset","arrayBars","document","getElementsByClassName","i","length","style","backgroundColor","push","Math","floor","random","setState","render","color","e","x","parseInt","target","value","y","mergeSort","quickSort","heapSort","bubbleSort","map","index","height","enable_disable","val","list","getElementById","pointerEvents","button","animations","getMergeSortAnimations","isColorChange","barOneIndex","barTwoIndex","barOneStyle","barTwoStyle","setTimeout","newHeight","removeProperty","getQuickSort","message","pivot","barStyle","compare","newHeight1","newHeight2","reset","getHeapSort","parent","limit","barParentIndex","barIndex","barParentStyle","getBubbleSort","len","color1","color2"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport * as Merge from '../Algorithms/mergeSort.js'\r\nimport * as Bubble from '../Algorithms/bubbleSort.js'\r\nimport * as Quick from '../Algorithms/quickSort.js'\r\nimport * as Heap from '../Algorithms/heapSort.js'\r\n\r\nimport './Visualizer.css';\r\n\r\n// Change this value for the speed of the animations.\r\nvar ANIMATION_SPEED_MS = 10;\r\n\r\n// Set MAX and MIN range for the array values\r\nconst MAX  = 350;\r\nconst MIN = 15;\r\n\r\n// Main Color of the Sorted Values \r\nconst PRIMARY_COLOR = '#1da1f2';\r\n\r\n// Color when compared\r\nconst SECONDARY_COLOR = 'white';\r\n\r\n// Default Color\r\nconst DEFAULT_COLOR = 'darkgrey';\r\n\r\n// Color to show visited in that iteration\r\nconst INTERMEDIATE_COLOR = 'darkcyan';\r\n\r\n// Color to focus on a particular position like pivot\r\nconst HIGHLIGHT_COLOR = 'yellow';\r\n\r\n// Speed Values in String\r\nvar speedRating = \"Average\";\r\n\r\nexport default class Visualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n            NUMBER_OF_ARRAY_BARS: 50,\r\n            Speed: 3\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    // Assigns Delay in code per Animation\r\n    speedAssign(speed) {\r\n        switch(speed){\r\n            case 1: ANIMATION_SPEED_MS = 2000; break;\r\n            case 2: ANIMATION_SPEED_MS = 1000; break;\r\n            case 3: ANIMATION_SPEED_MS = 500; break;\r\n            case 4: ANIMATION_SPEED_MS = 50; break;\r\n            case 5: ANIMATION_SPEED_MS = 1; break;\r\n            default: console.log(\"Error\");  \r\n        }\r\n    }\r\n\r\n    // Rates the Speed in String\r\n    speedRate(speed)\r\n    {\r\n        switch(speed){\r\n            case 1: speedRating = \"Slower\"; break;\r\n            case 2: speedRating = \"Slow\"; break;\r\n            case 3: speedRating = \"Average\"; break;\r\n            case 4: speedRating = \"Fast\"; break;\r\n            case 5: speedRating = \"Faster\"; break; \r\n            default: console.log(\"Error\");\r\n        }\r\n    }\r\n\r\n    // Resets Array and changes to Default Color\r\n    prepReset() {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for (let i = 0; i < arrayBars.length; i ++)\r\n            arrayBars[i].style.backgroundColor = DEFAULT_COLOR;\r\n        this.resetArray();\r\n    }\r\n\r\n    // Resets the array in State\r\n    resetArray() {\r\n        const array = [];\r\n        for(let i = 0; i < this.state.NUMBER_OF_ARRAY_BARS; i ++) {\r\n            array.push(Math.floor(Math.random() * MAX + MIN));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n        var length;\r\n        var speed;\r\n        return (\r\n            <div className = \"html-container\">\r\n                <h2 style={{color: \"#1da1f2\"}}>SORTING ALGORITHMS VISUALIZER</h2>\r\n                <nav className = \"button-container\">\r\n                        <li id = \"randomize\">\r\n                            <p id =\"random\"onClick = {() => this.prepReset()}>Randomize Array!</p>\r\n                        </li>\r\n\r\n\r\n                        <li id = \"slider1\">\r\n                                <label>Length </label>\r\n                                <input type=\"range\" min={4} max={100} defaultValue=\"50\" step=\"1\" value={length}  \r\n                                onChange={e => {\r\n                                    const x = parseInt(e.target.value, 10);\r\n                                    console.log(x+\"Here\");\r\n                                    this.setState((state) => ({ NUMBER_OF_ARRAY_BARS: x}));\r\n                                    this.prepReset()\r\n                                }}\r\n                                id=\"sliderL\"/>\r\n                                <span className=\"tooltip1\">{this.state.array.length}</span>\r\n                        </li>\r\n\r\n                        <li id = \"slider2\">\r\n                                <label>Speed</label>\r\n                                <input type=\"range\" min=\"1\" max=\"5\" defaultValue=\"3\" step=\"1\"  value={speed}\r\n                                onChange={e => {\r\n                                    const y = parseInt(e.target.value, 10);\r\n                                    console.log(y+\"Here123\");\r\n                                    this.setState((state) => ({ Speed: y}));\r\n                                    this.speedAssign(y);\r\n                                    this.speedRate(y);\r\n                                }}\r\n                                id=\"sliderS\"/>\r\n                                <span className=\"tooltip1\">{speedRating}</span>\r\n                        </li>\r\n\r\n\r\n                        <li id = \"sorting-buttons\">\r\n                            <p id = \"merge\" onClick = {() => this.mergeSort()}>Merge Sort <span className=\"tooltipMerge\"><b>Time Complexity</b>\r\n                            <br></br>Best Case: Ω(nlogn)<br></br>Average Case: θ(nlogn)<br></br>Worst Case: O(nlogn)</span></p>\r\n\r\n                            <p id = \"quick\" onClick = {() => this.quickSort()}>Quick Sort <span className=\"tooltipQuick\"><b>Time Complexity</b>\r\n                            <br></br>Best Case: Ω(nlogn)<br></br>Average Case: θ(nlogn)<br></br>Worst Case: O(n<sup>2</sup>)</span></p>\r\n                            \r\n                            <p id = \"heap\" onClick = {() => this.heapSort()}>Heap Sort <span className=\"tooltipHeap\"><b>Time Complexity</b>\r\n                            <br></br>Best Case: Ω(nlogn)<br></br>Average Case: θ(nlogn)<br></br>Worst Case: O(nlogn)</span></p>\r\n                            \r\n                            <p id = \"bubble\" onClick = {() => this.bubbleSort()}>Bubble Sort <span className=\"tooltipBubble\"><b>Time Complexity</b>\r\n                            <br></br>Best Case: Ω(n)<br></br>Average Case: θ(n<sup>2</sup>)<br></br>Worst Case: O(n<sup>2</sup>)</span></p>\r\n                            {/* <button onClick = {() => this.testing()}>Testing</button> */}\r\n                        </li>\r\n                </nav>\r\n\r\n                <div className = \"array-container\">\r\n\r\n                {array.map((value, index) => (\r\n                    <div className = \"array-bar\" key = {index} style = {{height: `${value}px`}}></div>\r\n                ))}\r\n                </div>\r\n            </div>    \r\n            \r\n        );\r\n    }  \r\n\r\n    enable_disable(val) {\r\n        const list = [\"random\", \"merge\", \"quick\", \"heap\", \"bubble\", \"sliderL\", \"sliderS\"];\r\n        for (let i = 0; i < list.length; i ++) {\r\n                document.getElementById(list[i]).style.pointerEvents = val;\r\n        }\r\n    }\r\n\r\n    // Merge Sort\r\n    mergeSort() {\r\n        const button = document.getElementById(\"merge\").style;\r\n        button.backgroundColor = \"#1da1f2\";\r\n        button.color = \"white\";\r\n        this.enable_disable(\"none\");\r\n        const animations = Merge.getMergeSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {    \r\n            const [barOneIndex, barTwoIndex] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIndex].style;\r\n            const barTwoStyle = arrayBars[barTwoIndex].style;\r\n            const color = i % 3 === 0 ? SECONDARY_COLOR : INTERMEDIATE_COLOR;\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n            }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n            setTimeout(() => {\r\n                const [barOneIndex, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                barOneStyle.height = `${newHeight}px`;\r\n            }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for (let i = 0; i < arrayBars.length; i ++)\r\n            arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\r\n        button.removeProperty(\"background-color\");\r\n        button.removeProperty(\"color\");\r\n\r\n        this.enable_disable(\"auto\");\r\n        }, animations.length * ANIMATION_SPEED_MS);\r\n\r\n        \r\n    }\r\n\r\n    // Quick Sort\r\n    quickSort() {\r\n        const button = document.getElementById(\"quick\").style;\r\n        button.backgroundColor = \"#1da1f2\";\r\n        button.color = \"white\";\r\n        this.enable_disable(\"none\");\r\n        const animations = Quick.getQuickSort(this.state.array);\r\n        for(let i = 0; i < animations.length; i ++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const [message, value] = animations[i];\r\n            if (message === \"Pivot\") {\r\n                const pivot = value;\r\n                const barStyle = arrayBars[pivot].style;\r\n                setTimeout(() => {\r\n                    barStyle.backgroundColor = HIGHLIGHT_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else if (message === \"Compare\") {\r\n                const compare = value;\r\n                const barStyle = arrayBars[compare].style;\r\n                setTimeout(() => {\r\n                    barStyle.backgroundColor = SECONDARY_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else if (message === \"Swap\") {\r\n                const [newHeight1, newHeight2, barOneIndex, barTwoIndex] = value;\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n                    barOneStyle.height = `${newHeight1}px`;\r\n                    barTwoStyle.height = `${newHeight2}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n                setTimeout(() => {\r\n                    barTwoStyle.backgroundColor = DEFAULT_COLOR;\r\n                    barOneStyle.backgroundColor = INTERMEDIATE_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n\r\n            }\r\n            else if (message === \"SwapPivot\") {\r\n                const [newHeight1, newHeight2, barOneIndex, barTwoIndex] = value;\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barTwoStyle.backgroundColor = INTERMEDIATE_COLOR;\r\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n                    barOneStyle.height = `${newHeight1}px`;\r\n                    barTwoStyle.height = `${newHeight2}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else if (message === \"Reset\") {\r\n                const reset = value;\r\n                const barStyle = arrayBars[reset].style;\r\n                setTimeout(() => {\r\n                    barStyle.backgroundColor = DEFAULT_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            setTimeout(() => {\r\n                const arrayBars = document.getElementsByClassName('array-bar');\r\n                for (let i = 0; i < arrayBars.length; i ++)\r\n                    arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\r\n                button.removeProperty(\"background-color\");\r\n                button.removeProperty(\"color\");\r\n                this.enable_disable(\"auto\");\r\n                }, animations.length * ANIMATION_SPEED_MS);\r\n        }\r\n    }\r\n\r\n    // Heap Sort\r\n    heapSort() {\r\n        const button = document.getElementById(\"heap\").style;\r\n        button.backgroundColor = \"#1da1f2\";\r\n        button.color = \"white\";\r\n        this.enable_disable(\"none\");\r\n        const animations = Heap.getHeapSort(this.state.array);\r\n        for( let i = 0; i < animations.length; i ++ ) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const [message, value] = animations[i];\r\n            if(message === \"Parent\") {\r\n                const parent = value;\r\n                const barStyle = arrayBars[parent].style;\r\n                setTimeout(() => {\r\n                    console.log(\"Parent Chosen\"+parent);\r\n                    barStyle.backgroundColor = HIGHLIGHT_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else if(message === \"Compare\") {\r\n                const [compare, limit] = value;\r\n                if(compare < limit){\r\n                    const barStyle = arrayBars[compare].style;\r\n                    setTimeout(() => {\r\n                        console.log(\"Compare with\"+compare);\r\n                        barStyle.backgroundColor = SECONDARY_COLOR;\r\n                    }, i * ANIMATION_SPEED_MS);\r\n                }\r\n                \r\n            }\r\n            else if (message === \"Swap\") {\r\n                const [newHeight1, newHeight2, barOneIndex, barTwoIndex] = value;\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n                    console.log(\"Swapping with: \"+barOneIndex+\"\\t\"+barTwoIndex);\r\n                    barOneStyle.height = `${newHeight1}px`;\r\n                    barTwoStyle.height = `${newHeight2}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n                setTimeout(() => {\r\n                    barTwoStyle.backgroundColor = INTERMEDIATE_COLOR;\r\n                    barOneStyle.backgroundColor = INTERMEDIATE_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n\r\n            }\r\n            else if (message === \"Reset\") {\r\n                const [barParentIndex, barIndex] = value;\r\n                const barParentStyle = arrayBars[barParentIndex].style;\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    if(barStyle.backgroundColor !== 'darkcyan'){\r\n                        barStyle.backgroundColor = DEFAULT_COLOR;\r\n                    }\r\n                    if(barParentStyle.backgroundColor !== 'darkcyan'){\r\n                        barParentStyle.backgroundColor = DEFAULT_COLOR;                    \r\n                    }\r\n                        \r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else if (message === \"SwapLargest\") {\r\n                const [newHeight1, newHeight2, barOneIndex, barTwoIndex] = value;\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n                    console.log(\"Final Swapping with: \"+barOneIndex+\"\\t\"+barTwoIndex);\r\n                    barOneStyle.height = `${newHeight1}px`;\r\n                    barTwoStyle.height = `${newHeight2}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n                setTimeout(() => {\r\n                    barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n                    barOneStyle.backgroundColor = INTERMEDIATE_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            setTimeout(() => {\r\n                const arrayBars = document.getElementsByClassName('array-bar');\r\n                for (let i = 0; i < arrayBars.length; i ++)\r\n                    arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\r\n                button.removeProperty(\"background-color\");\r\n                button.removeProperty(\"color\");\r\n                this.enable_disable(\"auto\");\r\n                }, animations.length * ANIMATION_SPEED_MS);\r\n        }\r\n    }\r\n\r\n    //Bubble Sort\r\n    bubbleSort() {\r\n        const button = document.getElementById(\"bubble\").style;\r\n        button.backgroundColor = \"#1da1f2\";\r\n        button.color = \"white\";\r\n        this.enable_disable(\"none\");\r\n        const animations = Bubble.getBubbleSort(this.state.array);\r\n        var len = (this.state.array.length - 1);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 1;\r\n            if (isColorChange) {\r\n                const [barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                const color1 = i % 3 === 0 ? SECONDARY_COLOR : INTERMEDIATE_COLOR;\r\n                const color2 = i % 3 === 0 ? SECONDARY_COLOR : INTERMEDIATE_COLOR;                \r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color1;\r\n                    barTwoStyle.backgroundColor = color2;\r\n                    if (i % 3 === 2 && barTwoIndex === len) {\r\n                        len --;\r\n                        barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n                        if(len === 0)\r\n                            barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n                    }\r\n                    \r\n                  }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [newHeight1, newHeight2] = animations[i];\r\n                    const [barOneIndex, barTwoIndex] = animations[i + 1];\r\n                    const barOneStyle = arrayBars[barOneIndex].style;\r\n                    const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                    barOneStyle.height = `${newHeight1}px`;\r\n                    barTwoStyle.height = `${newHeight2}px`;\r\n                  }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            setTimeout(() => {\r\n                const arrayBars = document.getElementsByClassName('array-bar');\r\n                for (let i = 0; i < arrayBars.length; i ++)\r\n                    arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\r\n                button.removeProperty(\"background-color\");\r\n                button.removeProperty(\"color\");\r\n                this.enable_disable(\"auto\");\r\n                }, animations.length * ANIMATION_SPEED_MS);\r\n        }\r\n    }\r\n\r\n    // testing() {\r\n    //     var max = 1000;\r\n    //     for (let i = 0; i < 1000; i ++){\r\n    //         const arrayTest = [];\r\n    //         const len = Math.floor(Math.random() * max + 1);\r\n    //         for (let j = 0; j < len; j ++){\r\n    //             arrayTest.push(Math.floor(Math.random() * max));\r\n    //         }\r\n    //         // console.log(\"arrayTest\");\r\n    //         // console.log(arrayTest);\r\n    //         const jsarray = arrayTest.slice().sort((a, b) => a - b);\r\n    //         const sortedArray = Heap.getHeapSort(arrayTest);\r\n    //         // console.log(jsarray);\r\n    //         // console.log(sortedArray);\r\n    //         console.log(ifEqual(jsarray, sortedArray));\r\n    //     }\r\n    // }\r\n}\r\n\r\n// function ifEqual(arr1, arr2) {\r\n//     if (arr1.length !== arr2.length) \r\n//         return false;\r\n//     for (let i = 0; i < arr1.length; i ++){\r\n//         if(arr1[i] !== arr2[i])\r\n//         return false;\r\n//     }\r\n//     return true;\r\n// }"]},"metadata":{},"sourceType":"module"}