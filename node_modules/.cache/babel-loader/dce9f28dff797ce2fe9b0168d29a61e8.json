{"ast":null,"code":"var _jsxFileName = \"C:\\\\Sanchit\\\\Projects\\\\sorting-algorithms-visualizer\\\\src\\\\Visualizer\\\\Visualizer.jsx\";\nimport React from 'react';\nimport * as Merge from '../Algorithms/mergeSort.js';\nimport * as Bubble from '../Algorithms/bubbleSort.js';\nimport * as Quick from '../Algorithms/quickSort.js';\nimport * as Heap from '../Algorithms/heapSort.js';\nimport './Visualizer.css'; // import { findRenderedComponentWithType } from 'react-dom/test-utils';\n// Change this value for the speed of the animations.\n\nconst ANIMATION_SPEED_MS = 10; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 100;\nconst MAX = 425;\nconst MIN = 15; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = '#1da1f2 '; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'white';\nconst DEFAULT_COLOR = 'darkgrey';\nconst INTERMEDIATE_COLOR = 'darkcyan';\nconst HIGHLIGHT_COLOR = 'yellow';\nexport default class Visualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n      length: 100,\n      speed: 100\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  prepReset() {\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    for (let i = 0; i < arrayBars.length; i++) arrayBars[i].style.backgroundColor = DEFAULT_COLOR;\n\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(Math.floor(Math.random() * MAX + MIN));\n    }\n\n    this.setState({\n      array\n    });\n    console.log(\"Current Array: \" + array);\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    var length;\n    var speed;\n    return React.createElement(\"div\", {\n      className: \"html-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      className: \"button-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      id: \"randomize\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      onClick: () => this.prepReset(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Randomize Array!\")), React.createElement(\"li\", {\n      id: \"slider1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Length \"), React.createElement(\"input\", {\n      type: \"range\",\n      min: MIN,\n      max: MAX,\n      step: \"1\",\n      value: length,\n      onChange: e => {\n        const x = parseInt(e.target.value, 10);\n        setState(({\n          y\n        }) => ({\n          x,\n          y\n        }));\n      },\n      className: \"slider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })), React.createElement(\"li\", {\n      id: \"slider2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Speed \"), React.createElement(\"input\", {\n      type: \"range\",\n      min: \"1\",\n      max: \"5\",\n      step: \"1\",\n      className: \"slider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })), React.createElement(\"li\", {\n      id: \"sorting-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      onClick: () => this.mergeSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Merge Sort \", React.createElement(\"span\", {\n      class: \"tooltipMerge\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Time Complexity\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), \"Best Case: \\u2126(nlogn)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), \"Average Case: \\u03B8(nlogn)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), \"Worst Case: O(nlogn)\")), React.createElement(\"p\", {\n      onClick: () => this.quickSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Quick Sort \", React.createElement(\"span\", {\n      class: \"tooltipQuick\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Time Complexity\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), \"Best Case: \\u2126(nlogn)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), \"Average Case: \\u03B8(nlogn)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), \"Worst Case: O(n\", React.createElement(\"sup\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"2\"), \")\")), React.createElement(\"p\", {\n      onClick: () => this.heapSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Heap Sort \", React.createElement(\"span\", {\n      class: \"tooltipHeap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Time Complexity\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), \"Best Case: \\u2126(nlogn)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), \"Average Case: \\u03B8(nlogn)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), \"Worst Case: O(nlogn)\")), React.createElement(\"p\", {\n      onClick: () => this.bubbleSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Bubble Sort \", React.createElement(\"span\", {\n      class: \"tooltipBubble\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Time Complexity\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), \"Best Case: \\u2126(n)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), \"Average Case: \\u03B8(n\", React.createElement(\"sup\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"2\"), \")\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), \"Worst Case: O(n\", React.createElement(\"sup\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"2\"), \")\")))), React.createElement(\"div\", {\n      className: \"array-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, array.map((value, index) => React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: index,\n      style: {\n        height: `${value}px`\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }))));\n  }\n\n  mergeSort() {\n    const animations = Merge.getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : INTERMEDIATE_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIndex, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIndex].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n\n    setTimeout(() => {\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      for (let i = 0; i < arrayBars.length; i++) arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n    }, animations.length * ANIMATION_SPEED_MS);\n  }\n\n  quickSort() {\n    const animations = Quick.getQuickSort(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [message, value] = animations[i];\n\n      if (message === \"Pivot\") {\n        const pivot = value;\n        const barStyle = arrayBars[pivot].style;\n        setTimeout(() => {\n          barStyle.backgroundColor = HIGHLIGHT_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (message === \"Compare\") {\n        const compare = value;\n        const barStyle = arrayBars[compare].style;\n        setTimeout(() => {\n          barStyle.backgroundColor = SECONDARY_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (message === \"Swap\") {\n        const [newHeight1, newHeight2, barOneIndex, barTwoIndex] = value;\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SECONDARY_COLOR;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n          barOneStyle.height = `${newHeight1}px`;\n          barTwoStyle.height = `${newHeight2}px`;\n        }, i * ANIMATION_SPEED_MS);\n        setTimeout(() => {\n          barTwoStyle.backgroundColor = DEFAULT_COLOR;\n          barOneStyle.backgroundColor = INTERMEDIATE_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (message === \"SwapPivot\") {\n        const [newHeight1, newHeight2, barOneIndex, barTwoIndex] = value;\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barTwoStyle.backgroundColor = INTERMEDIATE_COLOR;\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\n          barOneStyle.height = `${newHeight1}px`;\n          barTwoStyle.height = `${newHeight2}px`;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (message === \"Reset\") {\n        const reset = value;\n        const barStyle = arrayBars[reset].style;\n        setTimeout(() => {\n          barStyle.backgroundColor = DEFAULT_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  heapSort() {\n    const animations = Heap.getHeapSort(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [message, value] = animations[i];\n\n      if (message === \"Parent\") {\n        const parent = value;\n        const barStyle = arrayBars[parent].style;\n        setTimeout(() => {\n          console.log(\"Parent Chosen\" + parent);\n          barStyle.backgroundColor = HIGHLIGHT_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (message === \"Compare\") {\n        const [compare, limit] = value;\n\n        if (compare < limit) {\n          const barStyle = arrayBars[compare].style;\n          setTimeout(() => {\n            console.log(\"Compare with\" + compare);\n            barStyle.backgroundColor = SECONDARY_COLOR;\n          }, i * ANIMATION_SPEED_MS);\n        }\n      } else if (message === \"Swap\") {\n        const [newHeight1, newHeight2, barOneIndex, barTwoIndex] = value;\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SECONDARY_COLOR;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n          console.log(\"Swapping with: \" + barOneIndex + \"\\t\" + barTwoIndex);\n          barOneStyle.height = `${newHeight1}px`;\n          barTwoStyle.height = `${newHeight2}px`;\n        }, i * ANIMATION_SPEED_MS);\n        setTimeout(() => {\n          barTwoStyle.backgroundColor = INTERMEDIATE_COLOR;\n          barOneStyle.backgroundColor = INTERMEDIATE_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (message === \"Reset\") {\n        const [barParentIndex, barIndex, limit] = value;\n        const barParentStyle = arrayBars[barParentIndex].style;\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          if (barStyle.backgroundColor !== 'darkcyan') {\n            barStyle.backgroundColor = DEFAULT_COLOR;\n          }\n\n          if (barParentStyle.backgroundColor !== 'darkcyan') {\n            barParentStyle.backgroundColor = DEFAULT_COLOR;\n          }\n        }, i * ANIMATION_SPEED_MS);\n      } else if (message === \"SwapLargest\") {\n        const [newHeight1, newHeight2, barOneIndex, barTwoIndex] = value;\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SECONDARY_COLOR;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n          console.log(\"Final Swapping with: \" + barOneIndex + \"\\t\" + barTwoIndex);\n          barOneStyle.height = `${newHeight1}px`;\n          barTwoStyle.height = `${newHeight2}px`;\n        }, i * ANIMATION_SPEED_MS);\n        setTimeout(() => {\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\n          barOneStyle.backgroundColor = INTERMEDIATE_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  bubbleSort() {\n    const animations = Bubble.getBubbleSort(this.state.array);\n    var len = this.state.array.length - 1;\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 1;\n\n      if (isColorChange) {\n        const [barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        const color1 = i % 3 === 0 ? SECONDARY_COLOR : INTERMEDIATE_COLOR;\n        const color2 = i % 3 === 0 ? SECONDARY_COLOR : INTERMEDIATE_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color1;\n          barTwoStyle.backgroundColor = color2;\n\n          if (i % 3 === 2 && barTwoIndex === len) {\n            len--;\n            barTwoStyle.backgroundColor = PRIMARY_COLOR;\n            if (len === 0) barOneStyle.backgroundColor = PRIMARY_COLOR;\n          }\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [newHeight1, newHeight2] = animations[i];\n          const [barOneIndex, barTwoIndex] = animations[i + 1];\n          const barOneStyle = arrayBars[barOneIndex].style;\n          const barTwoStyle = arrayBars[barTwoIndex].style;\n          barOneStyle.height = `${newHeight1}px`;\n          barTwoStyle.height = `${newHeight2}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  } // testing() {\n  //     var max = 1000;\n  //     for (let i = 0; i < 1000; i ++){\n  //         const arrayTest = [];\n  //         const len = Math.floor(Math.random() * max + 1);\n  //         for (let j = 0; j < len; j ++){\n  //             arrayTest.push(Math.floor(Math.random() * max));\n  //         }\n  //         // console.log(\"arrayTest\");\n  //         // console.log(arrayTest);\n  //         const jsarray = arrayTest.slice().sort((a, b) => a - b);\n  //         const sortedArray = Heap.getHeapSort(arrayTest);\n  //         // console.log(jsarray);\n  //         // console.log(sortedArray);\n  //         console.log(ifEqual(jsarray, sortedArray));\n  //     }\n  // }\n\n\n} // function ifEqual(arr1, arr2) {\n//     if (arr1.length !== arr2.length) \n//         return false;\n//     for (let i = 0; i < arr1.length; i ++){\n//         if(arr1[i] !== arr2[i])\n//         return false;\n//     }\n//     return true;\n// }","map":{"version":3,"sources":["C:/Sanchit/Projects/sorting-algorithms-visualizer/src/Visualizer/Visualizer.jsx"],"names":["React","Merge","Bubble","Quick","Heap","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","MAX","MIN","PRIMARY_COLOR","SECONDARY_COLOR","DEFAULT_COLOR","INTERMEDIATE_COLOR","HIGHLIGHT_COLOR","Visualizer","Component","constructor","props","state","array","length","speed","componentDidMount","resetArray","prepReset","arrayBars","document","getElementsByClassName","i","style","backgroundColor","push","Math","floor","random","setState","console","log","render","e","x","parseInt","target","value","y","mergeSort","quickSort","heapSort","bubbleSort","map","index","height","animations","getMergeSortAnimations","isColorChange","barOneIndex","barTwoIndex","barOneStyle","barTwoStyle","color","setTimeout","newHeight","getQuickSort","message","pivot","barStyle","compare","newHeight1","newHeight2","reset","getHeapSort","parent","limit","barParentIndex","barIndex","barParentStyle","getBubbleSort","len","color1","color2"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport * as Merge from '../Algorithms/mergeSort.js'\r\nimport * as Bubble from '../Algorithms/bubbleSort.js'\r\nimport * as Quick from '../Algorithms/quickSort.js'\r\nimport * as Heap from '../Algorithms/heapSort.js'\r\n\r\nimport './Visualizer.css';\r\n// import { findRenderedComponentWithType } from 'react-dom/test-utils';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 10;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 100;\r\n\r\nconst MAX  = 425;\r\nconst MIN = 15;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = '#1da1f2 ';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'white';\r\n\r\nconst DEFAULT_COLOR = 'darkgrey';\r\n\r\nconst INTERMEDIATE_COLOR = 'darkcyan';\r\n\r\nconst HIGHLIGHT_COLOR = 'yellow';\r\n\r\nexport default class Visualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n            length: 100,\r\n            speed: 100\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    prepReset() {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for (let i = 0; i < arrayBars.length; i ++)\r\n            arrayBars[i].style.backgroundColor = DEFAULT_COLOR;\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for(let i = 0; i < NUMBER_OF_ARRAY_BARS; i ++) {\r\n            array.push(Math.floor(Math.random() * MAX + MIN));\r\n        }\r\n        this.setState({array});\r\n        console.log(\"Current Array: \"+array);   \r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n        var length;\r\n        var speed;\r\n        return (\r\n            <div className = \"html-container\">\r\n                {/* <h1 style={{color: \"#1da1f2\"}}>SORTING ALGORITHMS VISUALIZER</h1> */}\r\n                <nav className = \"button-container\">\r\n\r\n                        <li id = \"randomize\">\r\n                            <p onClick = {() => this.prepReset()}>Randomize Array!</p>\r\n                        </li>\r\n\r\n\r\n                        <li id = \"slider1\">\r\n                                <label>Length </label>\r\n                                <input type=\"range\" min={MIN} max={MAX} step=\"1\" value={length}  onChange={e => {\r\n          const x = parseInt(e.target.value, 10);\r\n          setState(({ y }) => ({ x, y })); }}className=\"slider\"/>\r\n                        </li>\r\n\r\n                        <li id = \"slider2\">\r\n                                <label>Speed </label>\r\n                                <input type=\"range\" min=\"1\" max=\"5\" step=\"1\"  className=\"slider\"/>\r\n                        </li>\r\n\r\n\r\n                        <li id = \"sorting-buttons\">\r\n                            <p onClick = {() => this.mergeSort()}>Merge Sort <span class=\"tooltipMerge\"><b>Time Complexity</b>\r\n                            <br></br>Best Case: Ω(nlogn)<br></br>Average Case: θ(nlogn)<br></br>Worst Case: O(nlogn)</span></p>\r\n\r\n                            <p onClick = {() => this.quickSort()}>Quick Sort <span class=\"tooltipQuick\"><b>Time Complexity</b>\r\n                            <br></br>Best Case: Ω(nlogn)<br></br>Average Case: θ(nlogn)<br></br>Worst Case: O(n<sup>2</sup>)</span></p>\r\n                            \r\n                            <p onClick = {() => this.heapSort()}>Heap Sort <span class=\"tooltipHeap\"><b>Time Complexity</b>\r\n                            <br></br>Best Case: Ω(nlogn)<br></br>Average Case: θ(nlogn)<br></br>Worst Case: O(nlogn)</span></p>\r\n                            \r\n                            <p onClick = {() => this.bubbleSort()}>Bubble Sort <span class=\"tooltipBubble\"><b>Time Complexity</b>\r\n                            <br></br>Best Case: Ω(n)<br></br>Average Case: θ(n<sup>2</sup>)<br></br>Worst Case: O(n<sup>2</sup>)</span></p>\r\n                            {/* <button onClick = {() => this.testing()}>Testing</button> */}\r\n                        </li>\r\n                </nav>\r\n\r\n                <div className = \"array-container\">\r\n\r\n                {array.map((value, index) => (\r\n                    <div className = \"array-bar\" key = {index} style = {{height: `${value}px`}}></div>\r\n                ))}\r\n                </div>\r\n            </div>    \r\n            \r\n        );\r\n    }  \r\n\r\n    mergeSort() {   \r\n        const animations = Merge.getMergeSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {    \r\n            const [barOneIndex, barTwoIndex] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIndex].style;\r\n            const barTwoStyle = arrayBars[barTwoIndex].style;\r\n            const color = i % 3 === 0 ? SECONDARY_COLOR : INTERMEDIATE_COLOR;\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n            }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n            setTimeout(() => {\r\n                const [barOneIndex, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                barOneStyle.height = `${newHeight}px`;\r\n            }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for (let i = 0; i < arrayBars.length; i ++)\r\n            arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\r\n        }, animations.length * ANIMATION_SPEED_MS);\r\n    }\r\n\r\n    quickSort() {\r\n        const animations = Quick.getQuickSort(this.state.array);\r\n        for(let i = 0; i < animations.length; i ++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const [message, value] = animations[i];\r\n            if (message === \"Pivot\") {\r\n                const pivot = value;\r\n                const barStyle = arrayBars[pivot].style;\r\n                setTimeout(() => {\r\n                    barStyle.backgroundColor = HIGHLIGHT_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else if (message === \"Compare\") {\r\n                const compare = value;\r\n                const barStyle = arrayBars[compare].style;\r\n                setTimeout(() => {\r\n                    barStyle.backgroundColor = SECONDARY_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else if (message === \"Swap\") {\r\n                const [newHeight1, newHeight2, barOneIndex, barTwoIndex] = value;\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n                    barOneStyle.height = `${newHeight1}px`;\r\n                    barTwoStyle.height = `${newHeight2}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n                setTimeout(() => {\r\n                    barTwoStyle.backgroundColor = DEFAULT_COLOR;\r\n                    barOneStyle.backgroundColor = INTERMEDIATE_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n\r\n            }\r\n            else if (message === \"SwapPivot\") {\r\n                const [newHeight1, newHeight2, barOneIndex, barTwoIndex] = value;\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barTwoStyle.backgroundColor = INTERMEDIATE_COLOR;\r\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n                    barOneStyle.height = `${newHeight1}px`;\r\n                    barTwoStyle.height = `${newHeight2}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else if (message === \"Reset\") {\r\n                const reset = value;\r\n                const barStyle = arrayBars[reset].style;\r\n                setTimeout(() => {\r\n                    barStyle.backgroundColor = DEFAULT_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    heapSort() {\r\n        const animations = Heap.getHeapSort(this.state.array);\r\n        for( let i = 0; i < animations.length; i ++ ) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const [message, value] = animations[i];\r\n            if(message === \"Parent\") {\r\n                const parent = value;\r\n                const barStyle = arrayBars[parent].style;\r\n                setTimeout(() => {\r\n                    console.log(\"Parent Chosen\"+parent);\r\n                    barStyle.backgroundColor = HIGHLIGHT_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else if(message === \"Compare\") {\r\n                const [compare, limit] = value;\r\n                if(compare < limit){\r\n                    const barStyle = arrayBars[compare].style;\r\n                    setTimeout(() => {\r\n                        console.log(\"Compare with\"+compare);\r\n                        barStyle.backgroundColor = SECONDARY_COLOR;\r\n                    }, i * ANIMATION_SPEED_MS);\r\n                }\r\n                \r\n            }\r\n            else if (message === \"Swap\") {\r\n                const [newHeight1, newHeight2, barOneIndex, barTwoIndex] = value;\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n                    console.log(\"Swapping with: \"+barOneIndex+\"\\t\"+barTwoIndex);\r\n                    barOneStyle.height = `${newHeight1}px`;\r\n                    barTwoStyle.height = `${newHeight2}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n                setTimeout(() => {\r\n                    barTwoStyle.backgroundColor = INTERMEDIATE_COLOR;\r\n                    barOneStyle.backgroundColor = INTERMEDIATE_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n\r\n            }\r\n            else if (message === \"Reset\") {\r\n                const [barParentIndex, barIndex, limit] = value;\r\n                const barParentStyle = arrayBars[barParentIndex].style;\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    if(barStyle.backgroundColor !== 'darkcyan'){\r\n                        barStyle.backgroundColor = DEFAULT_COLOR;\r\n                    }\r\n                    if(barParentStyle.backgroundColor !== 'darkcyan'){\r\n                        barParentStyle.backgroundColor = DEFAULT_COLOR;                    \r\n                    }\r\n                        \r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else if (message === \"SwapLargest\") {\r\n                const [newHeight1, newHeight2, barOneIndex, barTwoIndex] = value;\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n                    console.log(\"Final Swapping with: \"+barOneIndex+\"\\t\"+barTwoIndex);\r\n                    barOneStyle.height = `${newHeight1}px`;\r\n                    barTwoStyle.height = `${newHeight2}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n                setTimeout(() => {\r\n                    barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n                    barOneStyle.backgroundColor = INTERMEDIATE_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    bubbleSort() {\r\n        const animations = Bubble.getBubbleSort(this.state.array);\r\n        var len = (this.state.array.length - 1);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 1;\r\n            if (isColorChange) {\r\n                const [barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                const color1 = i % 3 === 0 ? SECONDARY_COLOR : INTERMEDIATE_COLOR;\r\n                const color2 = i % 3 === 0 ? SECONDARY_COLOR : INTERMEDIATE_COLOR;                \r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color1;\r\n                    barTwoStyle.backgroundColor = color2;\r\n                    if (i % 3 === 2 && barTwoIndex === len) {\r\n                        len --;\r\n                        barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n                        if(len === 0)\r\n                            barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n                    }\r\n                    \r\n                  }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [newHeight1, newHeight2] = animations[i];\r\n                    const [barOneIndex, barTwoIndex] = animations[i + 1];\r\n                    const barOneStyle = arrayBars[barOneIndex].style;\r\n                    const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                    barOneStyle.height = `${newHeight1}px`;\r\n                    barTwoStyle.height = `${newHeight2}px`;\r\n                  }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    // testing() {\r\n    //     var max = 1000;\r\n    //     for (let i = 0; i < 1000; i ++){\r\n    //         const arrayTest = [];\r\n    //         const len = Math.floor(Math.random() * max + 1);\r\n    //         for (let j = 0; j < len; j ++){\r\n    //             arrayTest.push(Math.floor(Math.random() * max));\r\n    //         }\r\n    //         // console.log(\"arrayTest\");\r\n    //         // console.log(arrayTest);\r\n    //         const jsarray = arrayTest.slice().sort((a, b) => a - b);\r\n    //         const sortedArray = Heap.getHeapSort(arrayTest);\r\n    //         // console.log(jsarray);\r\n    //         // console.log(sortedArray);\r\n    //         console.log(ifEqual(jsarray, sortedArray));\r\n    //     }\r\n    // }\r\n}\r\n\r\n// function ifEqual(arr1, arr2) {\r\n//     if (arr1.length !== arr2.length) \r\n//         return false;\r\n//     for (let i = 0; i < arr1.length; i ++){\r\n//         if(arr1[i] !== arr2[i])\r\n//         return false;\r\n//     }\r\n//     return true;\r\n// }"]},"metadata":{},"sourceType":"module"}