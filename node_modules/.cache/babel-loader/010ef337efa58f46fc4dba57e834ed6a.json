{"ast":null,"code":"export function getMergeSortAnimations(array){var animations=[];if(array.length<=1)return array;var auxiliaryArray=array.slice();mergeSortHelper(array,0,array.length-1,auxiliaryArray,animations);return animations;}function mergeSortHelper(mainArray,startIndex,endIndex,auxiliaryArray,animations){if(startIndex===endIndex)return;var middleIndex=Math.floor((startIndex+endIndex)/2);mergeSortHelper(auxiliaryArray,startIndex,middleIndex,mainArray,animations);mergeSortHelper(auxiliaryArray,middleIndex+1,endIndex,mainArray,animations);doMerge(mainArray,startIndex,middleIndex,endIndex,auxiliaryArray,animations);}function doMerge(mainArray,startIndex,middleIndex,endIndex,auxiliaryArray,animations){var k=startIndex;var i=startIndex;var j=middleIndex+1;while(i<=middleIndex&&j<=endIndex){animations.push([i,j]);animations.push([i,j]);if(auxiliaryArray[i]<=auxiliaryArray[j]){animations.push([k,auxiliaryArray[i]]);mainArray[k++]=auxiliaryArray[i++];}else{animations.push([k,auxiliaryArray[j]]);mainArray[k++]=auxiliaryArray[j++];}}while(i<=middleIndex){animations.push([i,i]);animations.push([i,i]);animations.push([k,auxiliaryArray[i]]);mainArray[k++]=auxiliaryArray[i++];}while(j<=endIndex){animations.push([j,j]);animations.push([j,j]);animations.push([k,auxiliaryArray[j]]);mainArray[k++]=auxiliaryArray[j++];}}","map":{"version":3,"sources":["C:/Sanchit/Projects/sorting-algorithms-visualizer/src/Algorithms/mergeSort.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIndex","endIndex","middleIndex","Math","floor","doMerge","k","i","j","push"],"mappings":"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","sourcesContent":["export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) \r\n    return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIndex,\r\n  endIndex,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  if (startIndex === endIndex) \r\n    return;\r\n  const middleIndex = Math.floor((startIndex + endIndex) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIndex, middleIndex, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIndex + 1, endIndex, mainArray, animations);\r\n  doMerge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIndex,\r\n  middleIndex,\r\n  endIndex,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  let k = startIndex;\r\n  let i = startIndex;\r\n  let j = middleIndex + 1;\r\n  while (i <= middleIndex && j <= endIndex) {\r\n    animations.push([i, j]);\r\n    animations.push([i, j]);\r\n\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } \r\n    else {\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIndex) {\r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n    animations.push([k, auxiliaryArray[i]]);\r\n\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIndex) {\r\n    animations.push([j, j]);\r\n    animations.push([j, j]);\r\n    animations.push([k, auxiliaryArray[j]]);\r\n\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}