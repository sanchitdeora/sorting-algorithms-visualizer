{"ast":null,"code":"import { getMergeSortAnimations } from \"./mergeSort\";\nexport function getHeapSort(array) {\n  const auxiliaryArray = array.slice(0);\n  const animations = [];\n  sort(animations, auxiliaryArray);\n  console.log(animations);\n  return animations;\n}\n\nfunction sort(animations, auxiliaryArray) {\n  const len = auxiliaryArray.length;\n  var temp;\n\n  for (let i = Math.floor(len / 2 - 1); i >= 0; i--) {\n    heapify(animations, auxiliaryArray, len, i);\n  }\n\n  for (let i = len - 1; i >= 0; i--) {\n    temp = auxiliaryArray[i];\n    auxiliaryArray[i] = auxiliaryArray[0];\n    auxiliaryArray[0] = temp;\n    animations.push([\"SwapLargest\", [auxiliaryArray[0], auxiliaryArray[i], 0, i]]);\n    heapify(animations, auxiliaryArray, i, 0);\n  }\n}\n\nfunction heapify(animations, auxiliaryArray, n, i) {\n  var temp;\n  var largest = i;\n  var l = i * 2 + 1;\n  var r = i * 2 + 2;\n  animations.push([\"Parent\", i]);\n  animations.push([\"Compare\", [l, n]]);\n\n  if (l < n && auxiliaryArray[l] > auxiliaryArray[largest]) {\n    largest = l;\n  }\n\n  animations.push([\"Compare\", [r, n]]);\n\n  if (r < n && auxiliaryArray[r] > auxiliaryArray[largest]) {\n    largest = r;\n  }\n\n  if (largest != i) {\n    temp = auxiliaryArray[largest];\n    auxiliaryArray[largest] = auxiliaryArray[i];\n    auxiliaryArray[i] = temp;\n    animations.push([\"Swap\", [auxiliaryArray[largest], auxiliaryArray[i], largest, i]]);\n    animations.push([\"Reset\", [largest, l, r, n]]);\n    heapify(animations, auxiliaryArray, n, largest);\n  }\n\n  animations.push([\"Reset\", [i, l, r, n]]);\n}","map":{"version":3,"sources":["C:/Sanchit/Projects/sorting-algorithms-visualizer/src/Algorithms/heapSort.js"],"names":["getMergeSortAnimations","getHeapSort","array","auxiliaryArray","slice","animations","sort","console","log","len","length","temp","i","Math","floor","heapify","push","n","largest","l","r"],"mappings":"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","sourcesContent":["import { getMergeSortAnimations } from \"./mergeSort\";\r\n\r\nexport function getHeapSort(array) {\r\n    const auxiliaryArray = array.slice(0);\r\n    const animations = [];\r\n    sort(animations, auxiliaryArray);\r\n    console.log(animations);\r\n    return animations;\r\n}\r\n\r\nfunction sort(animations, auxiliaryArray) {\r\n    const len = auxiliaryArray.length;\r\n    var temp;\r\n    for(let i = Math.floor((len / 2) - 1); i >= 0; i --) {\r\n        \r\n        heapify(animations, auxiliaryArray, len, i);\r\n    }\r\n\r\n    for(let i = len - 1; i >= 0; i --) {\r\n        temp = auxiliaryArray[i];\r\n        auxiliaryArray[i] = auxiliaryArray[0];\r\n        auxiliaryArray[0] = temp;\r\n        \r\n        animations.push([\"SwapLargest\", [auxiliaryArray[0], auxiliaryArray[i], 0, i]]);\r\n        heapify(animations, auxiliaryArray, i, 0);\r\n    }\r\n}\r\n\r\nfunction heapify(animations, auxiliaryArray, n, i) {\r\n    var temp;\r\n    var largest = i;\r\n    var l = (i * 2) + 1;\r\n    var r = (i * 2) + 2;\r\n    animations.push([\"Parent\", i]);\r\n    animations.push([\"Compare\", [l, n]]);\r\n    if(l < n && auxiliaryArray[l] > auxiliaryArray[largest]){\r\n        largest = l;\r\n    }\r\n    animations.push([\"Compare\", [r, n]]);\r\n    if(r < n && auxiliaryArray[r] > auxiliaryArray[largest]){\r\n        largest = r;\r\n    }\r\n\r\n    if(largest != i) {\r\n        temp = auxiliaryArray[largest];\r\n        auxiliaryArray[largest] = auxiliaryArray[i];\r\n        auxiliaryArray[i] = temp;\r\n\r\n        animations.push([\"Swap\", [auxiliaryArray[largest], auxiliaryArray[i], largest, i]]);\r\n        animations.push([\"Reset\", [largest, l , r, n]]);\r\n        heapify(animations, auxiliaryArray, n, largest);\r\n    }\r\n    animations.push([\"Reset\", [i, l, r, n]]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}