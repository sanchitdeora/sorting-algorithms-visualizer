{"ast":null,"code":"var _jsxFileName = \"C:\\\\Sanchit\\\\Projects\\\\sorting-algorithms-visualizer\\\\src\\\\Visualizer\\\\Visualizer.jsx\";\nimport React from 'react';\nimport * as Merge from '../Algorithms/mergeSort.js';\nimport * as Bubble from '../Algorithms/bubbleSort.js';\nimport * as Quick from '../Algorithms/quickSort.js';\nimport './Visualizer.css'; // import { findRenderedComponentWithType } from 'react-dom/test-utils';\n// Change this value for the speed of the animations.\n\nconst ANIMATION_SPEED_MS = 10; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 100; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = '#44b8ff'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'white';\nconst DEFAULT_COLOR = 'darkgrey';\nconst INTERMEDIATE_COLOR = 'darkcyan';\nexport default class Visualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  prepReset() {\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    for (let i = 0; i < arrayBars.length; i++) arrayBars[i].style.backgroundColor = DEFAULT_COLOR;\n\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    var max = 400;\n    var min = 15;\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(Math.floor(Math.random() * max + min));\n    }\n\n    this.setState({\n      array\n    });\n    console.log(\"Current Array: \" + array);\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"html-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"button-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"randomize\",\n      onClick: () => this.prepReset(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Randomize Array!\"), React.createElement(\"button\", {\n      onClick: () => this.mergeSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Merge Sort\"), React.createElement(\"button\", {\n      id: \"sort\",\n      onClick: () => this.prepReset(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Sort!\")), React.createElement(\"div\", {\n      className: \"array-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, array.map((value, index) => React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: index,\n      style: {\n        height: `${value}px`\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }))));\n  }\n\n  mergeSort() {\n    const animations = Merge.getMergeSortAnimations(this.state.array);\n    console.log(\"Final Animations: \" + animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : INTERMEDIATE_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIndex, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIndex].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n\n    setTimeout(() => {\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      for (let i = 0; i < arrayBars.length; i++) arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n    }, animations.length * ANIMATION_SPEED_MS);\n  }\n\n  quickSort() {\n    const animations = Quick.getQuickSort(this.state.array);\n    console.log(\"CHECK:\");\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [message, value] = animations[i];\n\n      if (message === \"Pivot\") {\n        const pivot = value;\n        const barStyle = arrayBars[pivot].style;\n        setTimeout(() => {\n          barStyle.backgroundColor = \"yellow\";\n        }, i * ANIMATION_SPEED_MS);\n      } else if (message === \"Compare\") {\n        const compare = value;\n        const barStyle = arrayBars[compare].style;\n        setTimeout(() => {\n          barStyle.backgroundColor = SECONDARY_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (message === \"Swap\") {\n        const [newHeight1, newHeight2, barOneIndex, barTwoIndex] = value;\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SECONDARY_COLOR;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n          barOneStyle.height = `${newHeight1}px`;\n          barTwoStyle.height = `${newHeight2}px`;\n        }, i * ANIMATION_SPEED_MS);\n        setTimeout(() => {\n          barTwoStyle.backgroundColor = DEFAULT_COLOR;\n          barOneStyle.backgroundColor = INTERMEDIATE_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (message === \"SwapPivot\") {\n        const [newHeight1, newHeight2, barOneIndex, barTwoIndex] = value;\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barTwoStyle.backgroundColor = INTERMEDIATE_COLOR;\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\n          barOneStyle.height = `${newHeight1}px`;\n          barTwoStyle.height = `${newHeight2}px`;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (message === \"Reset\") {\n        const compare = value;\n        const barStyle = arrayBars[compare].style;\n        setTimeout(() => {\n          barStyle.backgroundColor = DEFAULT_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  insertionSort() {}\n\n  bubbleSort() {\n    const animations = Bubble.getBubbleSort(this.state.array);\n    console.log(animations);\n    var len = this.state.array.length - 1;\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 1;\n\n      if (isColorChange) {\n        const [barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        const color1 = i % 3 === 0 ? SECONDARY_COLOR : INTERMEDIATE_COLOR;\n        const color2 = i % 3 === 0 ? SECONDARY_COLOR : INTERMEDIATE_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color1;\n          barTwoStyle.backgroundColor = color2;\n\n          if (i % 3 === 2 && barTwoIndex === len) {\n            len--;\n            barTwoStyle.backgroundColor = PRIMARY_COLOR;\n            if (len === 0) barOneStyle.backgroundColor = PRIMARY_COLOR;\n          }\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [newHeight1, newHeight2] = animations[i];\n          const [barOneIndex, barTwoIndex] = animations[i + 1];\n          const barOneStyle = arrayBars[barOneIndex].style;\n          const barTwoStyle = arrayBars[barTwoIndex].style;\n          barOneStyle.height = `${newHeight1}px`;\n          barTwoStyle.height = `${newHeight2}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  } // testing() {\n  //     var min  = -1000;\n  //     var max = 1000;\n  //     for (let i = 0; i < 100; i ++){\n  //         const arrayTest = [];\n  //         const len = Math.floor(Math.random() * max + 1);\n  //         for (let j = 0; j < len; j ++){\n  //             arrayTest.push(Math.floor(Math.random() * max));\n  //         }\n  //         // console.log(arrayTest);\n  //         const jsarray = arrayTest.slice().sort((a, b) => a - b);\n  //         const sortedArray = Quick.getQuickSort(arrayTest);\n  //         // console.log(sortedArray);\n  //         console.log(ifEqual(jsarray, sortedArray));\n  //     }\n  // }\n\n\n} // function ifEqual(arr1, arr2) {\n//     if (arr1.length !== arr2.length) \n//         return false;\n//     for (let i = 0; i < arr1.length; i ++){\n//         if(arr1[i] !== arr2[i])\n//         return false;\n//     }\n//     return true;\n// }","map":{"version":3,"sources":["C:/Sanchit/Projects/sorting-algorithms-visualizer/src/Visualizer/Visualizer.jsx"],"names":["React","Merge","Bubble","Quick","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","DEFAULT_COLOR","INTERMEDIATE_COLOR","Visualizer","Component","constructor","props","state","array","componentDidMount","resetArray","prepReset","arrayBars","document","getElementsByClassName","i","length","style","backgroundColor","max","min","push","Math","floor","random","setState","console","log","render","mergeSort","map","value","index","height","animations","getMergeSortAnimations","isColorChange","barOneIndex","barTwoIndex","barOneStyle","barTwoStyle","color","setTimeout","newHeight","quickSort","getQuickSort","message","pivot","barStyle","compare","newHeight1","newHeight2","insertionSort","bubbleSort","getBubbleSort","len","color1","color2"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport * as Merge from '../Algorithms/mergeSort.js'\r\nimport * as Bubble from '../Algorithms/bubbleSort.js'\r\nimport * as Quick from '../Algorithms/quickSort.js'\r\n\r\nimport './Visualizer.css';\r\n// import { findRenderedComponentWithType } from 'react-dom/test-utils';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 10;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 100;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = '#44b8ff';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'white';\r\n\r\nconst DEFAULT_COLOR = 'darkgrey';\r\n\r\nconst INTERMEDIATE_COLOR = 'darkcyan';\r\n\r\nexport default class Visualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    prepReset() {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for (let i = 0; i < arrayBars.length; i ++)\r\n            arrayBars[i].style.backgroundColor = DEFAULT_COLOR;\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        var max  = 400;\r\n        var min = 15;\r\n        for(let i = 0; i < NUMBER_OF_ARRAY_BARS; i ++) {\r\n            array.push(Math.floor(Math.random() * max + min));\r\n        }\r\n        this.setState({array});\r\n        console.log(\"Current Array: \"+array);   \r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n        return (\r\n            <div className = \"html-container\">\r\n                <div className = \"button-container\">\r\n                    <button id = \"randomize\" onClick = {() => this.prepReset()}>Randomize Array!</button>  \r\n                    <button onClick = {() => this.mergeSort()}>Merge Sort</button>\r\n                    {/* <button onClick = {() => this.quickSort()}>Quick Sort</button>\r\n                    <button onClick = {() => this.insertionSort()}>Insertion Sort</button>\r\n                    <button onClick = {() => this.bubbleSort()}>Bubble Sort</button> */}\r\n                    {/* <button onClick = {() => this.testing()}>Testing</button> */}\r\n                    <button id = \"sort\" onClick = {() => this.prepReset()}>Sort!</button>  \r\n                </div>\r\n\r\n                <div className = \"array-container\">\r\n                {array.map((value, index) => (\r\n                    <div className = \"array-bar\" key = {index} style = {{height: `${value}px`}}>\r\n                    </div>\r\n                ))}\r\n                </div>\r\n            </div>    \r\n            \r\n        );\r\n    }  \r\n\r\n        mergeSort() {   \r\n        const animations = Merge.getMergeSortAnimations(this.state.array);\r\n        console.log(\"Final Animations: \"+animations);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {    \r\n            const [barOneIndex, barTwoIndex] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIndex].style;\r\n            const barTwoStyle = arrayBars[barTwoIndex].style;\r\n            const color = i % 3 === 0 ? SECONDARY_COLOR : INTERMEDIATE_COLOR;\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n            }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n            setTimeout(() => {\r\n                const [barOneIndex, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                barOneStyle.height = `${newHeight}px`;\r\n            }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for (let i = 0; i < arrayBars.length; i ++)\r\n            arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\r\n        }, animations.length * ANIMATION_SPEED_MS);\r\n    }\r\n\r\n    quickSort() {\r\n        const animations = Quick.getQuickSort(this.state.array);\r\n        console.log(\"CHECK:\");\r\n        console.log(animations);\r\n        for(let i = 0; i < animations.length; i ++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const [message, value] = animations[i];\r\n            if (message === \"Pivot\") {\r\n                const pivot = value;\r\n                const barStyle = arrayBars[pivot].style;\r\n                setTimeout(() => {\r\n                    barStyle.backgroundColor = \"yellow\";\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else if (message === \"Compare\") {\r\n                const compare = value;\r\n                const barStyle = arrayBars[compare].style;\r\n                setTimeout(() => {\r\n                    barStyle.backgroundColor = SECONDARY_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else if (message === \"Swap\") {\r\n                const [newHeight1, newHeight2, barOneIndex, barTwoIndex] = value;\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n                    barOneStyle.height = `${newHeight1}px`;\r\n                    barTwoStyle.height = `${newHeight2}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n                setTimeout(() => {\r\n                    barTwoStyle.backgroundColor = DEFAULT_COLOR;\r\n                    barOneStyle.backgroundColor = INTERMEDIATE_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n\r\n            }\r\n            else if (message === \"SwapPivot\") {\r\n                const [newHeight1, newHeight2, barOneIndex, barTwoIndex] = value;\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barTwoStyle.backgroundColor = INTERMEDIATE_COLOR;\r\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n                    barOneStyle.height = `${newHeight1}px`;\r\n                    barTwoStyle.height = `${newHeight2}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else if (message === \"Reset\") {\r\n                const compare = value;\r\n                const barStyle = arrayBars[compare].style;\r\n                setTimeout(() => {\r\n                    barStyle.backgroundColor = DEFAULT_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    insertionSort() {}\r\n\r\n    bubbleSort() {\r\n        const animations = Bubble.getBubbleSort(this.state.array);\r\n        console.log(animations);\r\n        var len = (this.state.array.length - 1);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 1;\r\n            if (isColorChange) {\r\n                const [barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                const color1 = i % 3 === 0 ? SECONDARY_COLOR : INTERMEDIATE_COLOR;\r\n                const color2 = i % 3 === 0 ? SECONDARY_COLOR : INTERMEDIATE_COLOR;                \r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color1;\r\n                    barTwoStyle.backgroundColor = color2;\r\n                    if (i % 3 === 2 && barTwoIndex === len) {\r\n                        len --;\r\n                        barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n                        if(len === 0)\r\n                            barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n                    }\r\n                    \r\n                  }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [newHeight1, newHeight2] = animations[i];\r\n                    const [barOneIndex, barTwoIndex] = animations[i + 1];\r\n                    const barOneStyle = arrayBars[barOneIndex].style;\r\n                    const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                    barOneStyle.height = `${newHeight1}px`;\r\n                    barTwoStyle.height = `${newHeight2}px`;\r\n                  }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    // testing() {\r\n    //     var min  = -1000;\r\n    //     var max = 1000;\r\n    //     for (let i = 0; i < 100; i ++){\r\n    //         const arrayTest = [];\r\n    //         const len = Math.floor(Math.random() * max + 1);\r\n    //         for (let j = 0; j < len; j ++){\r\n    //             arrayTest.push(Math.floor(Math.random() * max));\r\n    //         }\r\n    //         // console.log(arrayTest);\r\n    //         const jsarray = arrayTest.slice().sort((a, b) => a - b);\r\n    //         const sortedArray = Quick.getQuickSort(arrayTest);\r\n    //         // console.log(sortedArray);\r\n    //         console.log(ifEqual(jsarray, sortedArray));\r\n    //     }\r\n    // }\r\n}\r\n\r\n// function ifEqual(arr1, arr2) {\r\n//     if (arr1.length !== arr2.length) \r\n//         return false;\r\n//     for (let i = 0; i < arr1.length; i ++){\r\n//         if(arr1[i] !== arr2[i])\r\n//         return false;\r\n//     }\r\n//     return true;\r\n// }"]},"metadata":{},"sourceType":"module"}