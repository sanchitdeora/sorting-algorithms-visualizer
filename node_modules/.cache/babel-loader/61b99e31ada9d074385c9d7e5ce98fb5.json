{"ast":null,"code":"export function getQuickSort(array) {\n  console.log(array);\n  const auxiliaryArray = array.slice();\n  sort(auxiliaryArray, 0, array.length);\n  return auxiliaryArray;\n}\n\nfunction sort(auxiliaryArray, low, high) {\n  if (low < high) {\n    const pi = partition(auxiliaryArray, low, high);\n    sort(auxiliaryArray, low, pi - 1);\n    sort(auxiliaryArray, pi + 1, high);\n  }\n}\n\nfunction partition(auxiliaryArray, low, high) {\n  const pivot = auxiliaryArray[low];\n  var i = low;\n  var temp;\n\n  for (let j = low + 1; j <= high; j++) {\n    if (auxiliaryArray[j] <= pivot) {\n      i = i + 1;\n      temp = auxiliaryArray[i];\n      auxiliaryArray[i] = auxiliaryArray[j];\n      auxiliaryArray[j] = temp;\n    }\n  }\n\n  temp = auxiliaryArray[i];\n  auxiliaryArray[i] = auxiliaryArray[low];\n  auxiliaryArray[low] = temp;\n  return i;\n}","map":{"version":3,"sources":["C:/Sanchit/Projects/sorting-algorithms-visualizer/src/Algorithms/quickSort.js"],"names":["getQuickSort","array","console","log","auxiliaryArray","slice","sort","length","low","high","pi","partition","pivot","i","temp","j"],"mappings":"AAAA,OAAO,SAASA,YAAT,CAAsBC,KAAtB,EAA6B;AAChCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,QAAMG,cAAc,GAAGH,KAAK,CAACI,KAAN,EAAvB;AACAC,EAAAA,IAAI,CAACF,cAAD,EAAiB,CAAjB,EAAoBH,KAAK,CAACM,MAA1B,CAAJ;AACA,SAAOH,cAAP;AACH;;AAED,SAASE,IAAT,CAAcF,cAAd,EAA8BI,GAA9B,EAAmCC,IAAnC,EAAyC;AACrC,MAAGD,GAAG,GAAGC,IAAT,EAAe;AACX,UAAMC,EAAE,GAAGC,SAAS,CAACP,cAAD,EAAiBI,GAAjB,EAAsBC,IAAtB,CAApB;AACAH,IAAAA,IAAI,CAACF,cAAD,EAAiBI,GAAjB,EAAuBE,EAAE,GAAC,CAA1B,CAAJ;AACAJ,IAAAA,IAAI,CAACF,cAAD,EAAkBM,EAAE,GAAC,CAArB,EAAyBD,IAAzB,CAAJ;AACH;AACJ;;AAED,SAASE,SAAT,CAAmBP,cAAnB,EAAmCI,GAAnC,EAAwCC,IAAxC,EAA6C;AACzC,QAAMG,KAAK,GAAGR,cAAc,CAACI,GAAD,CAA5B;AACA,MAAIK,CAAC,GAAGL,GAAR;AACA,MAAIM,IAAJ;;AACA,OAAI,IAAIC,CAAC,GAAGP,GAAG,GAAG,CAAlB,EAAqBO,CAAC,IAAIN,IAA1B,EAAgCM,CAAC,EAAjC,EAAqC;AACjC,QAAGX,cAAc,CAACW,CAAD,CAAd,IAAqBH,KAAxB,EAA8B;AAC1BC,MAAAA,CAAC,GAAGA,CAAC,GAAG,CAAR;AACAC,MAAAA,IAAI,GAAGV,cAAc,CAACS,CAAD,CAArB;AACAT,MAAAA,cAAc,CAACS,CAAD,CAAd,GAAoBT,cAAc,CAACW,CAAD,CAAlC;AACAX,MAAAA,cAAc,CAACW,CAAD,CAAd,GAAoBD,IAApB;AACH;AACJ;;AACDA,EAAAA,IAAI,GAAGV,cAAc,CAACS,CAAD,CAArB;AACAT,EAAAA,cAAc,CAACS,CAAD,CAAd,GAAoBT,cAAc,CAACI,GAAD,CAAlC;AACAJ,EAAAA,cAAc,CAACI,GAAD,CAAd,GAAsBM,IAAtB;AACA,SAAOD,CAAP;AACH","sourcesContent":["export function getQuickSort(array) {\r\n    console.log(array);\r\n    const auxiliaryArray = array.slice();\r\n    sort(auxiliaryArray, 0, array.length);\r\n    return auxiliaryArray;\r\n}\r\n\r\nfunction sort(auxiliaryArray, low, high) {\r\n    if(low < high) {\r\n        const pi = partition(auxiliaryArray, low, high);\r\n        sort(auxiliaryArray, low, (pi-1));\r\n        sort(auxiliaryArray, (pi+1), high);\r\n    }\r\n}\r\n\r\nfunction partition(auxiliaryArray, low, high){\r\n    const pivot = auxiliaryArray[low];\r\n    var i = low;\r\n    var temp;\r\n    for(let j = low + 1; j <= high; j ++){\r\n        if(auxiliaryArray[j] <= pivot){\r\n            i = i + 1;\r\n            temp = auxiliaryArray[i];\r\n            auxiliaryArray[i] = auxiliaryArray[j];\r\n            auxiliaryArray[j] = temp;\r\n        }\r\n    }\r\n    temp = auxiliaryArray[i];\r\n    auxiliaryArray[i] = auxiliaryArray[low];\r\n    auxiliaryArray[low] = temp;\r\n    return i;\r\n}"]},"metadata":{},"sourceType":"module"}