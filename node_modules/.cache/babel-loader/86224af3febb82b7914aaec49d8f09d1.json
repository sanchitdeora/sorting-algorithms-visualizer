{"ast":null,"code":"var _jsxFileName = \"C:\\\\Sanchit\\\\Projects\\\\sorting-algorithms-visualizer\\\\src\\\\Visualizer\\\\Visualizer.jsx\";\nimport React from 'react';\nimport * as Algorithms from '../Algorithms/mergeSort.js';\nimport './Visualizer.css'; // Change this value for the speed of the animations.\n\nconst ANIMATION_SPEED_MS = 1; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 310; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'black'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'white';\nexport default class Visualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    var max = 500;\n    var min = 5;\n\n    for (let i = 0; i < 100; i++) {\n      array.push(Math.floor(Math.random() * max + min));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const animations = Algorithms.getMergeSortAnimations(this.state.array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * 5);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * 5);\n      }\n    }\n  }\n\n  quickSort() {}\n\n  heapSort() {}\n\n  bubbleSort() {} // testing() {\n  //     var max  = -1000;\n  //     var min = 1000;\n  //     for (let i = 0; i < 100; i ++){\n  //         const array = [];\n  //         const len = Math.floor(Math.random() * max + 1);\n  //         for (let j = 0; j < len; j ++){\n  //             array.push(Math.floor(Math.random() * max + min));\n  //         }\n  //         const jsarray = this.state.array.slice().sort((a, b) => a - b);\n  //         const sorted = Algorithms.mergeSort(this.state.array);\n  //         console.log(ifEqual(jsarray, sorted));\n  //     }\n  // }\n\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"array-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, array.map((value, index) => React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: index,\n      style: {\n        height: `${value}px`\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Randomize Array!\"), React.createElement(\"button\", {\n      onClick: () => this.mergeSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Merge Sort\"), React.createElement(\"button\", {\n      onClick: () => this.quickSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Quick Sort\"), React.createElement(\"button\", {\n      onClick: () => this.heapSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"HeapSort\"), React.createElement(\"button\", {\n      onClick: () => this.bubbleSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Bubble Sort\"), React.createElement(\"button\", {\n      onClick: () => this.testing(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Testing\"));\n  }\n\n}\n\nfunction ifEqual(arr1, arr2) {\n  if (arr1.length != arr2.length) return false;\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["C:/Sanchit/Projects/sorting-algorithms-visualizer/src/Visualizer/Visualizer.jsx"],"names":["React","Algorithms","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","Visualizer","Component","constructor","props","state","array","componentDidMount","resetArray","max","min","i","push","Math","floor","random","setState","mergeSort","animations","getMergeSortAnimations","console","log","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","quickSort","heapSort","bubbleSort","render","map","value","index","testing","ifEqual","arr1","arr2"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport * as Algorithms from '../Algorithms/mergeSort.js'\r\nimport './Visualizer.css';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 310;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'black';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'white';\r\n\r\nexport default class Visualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        var max  = 500;\r\n        var min = 5;\r\n        for(let i = 0; i < 100; i ++) {\r\n            array.push(Math.floor(Math.random() * max + min));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    mergeSort() {   \r\n        const animations = Algorithms.getMergeSortAnimations(this.state.array);\r\n        console.log(animations);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n              const [barOneIdx, barTwoIdx] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              const barTwoStyle = arrayBars[barTwoIdx].style;\r\n              const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n              setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n              }, i * 5);\r\n            } else {\r\n              setTimeout(() => {\r\n                const [barOneIdx, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                barOneStyle.height = `${newHeight}px`;\r\n              }, i * 5);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    quickSort() {}\r\n    \r\n    heapSort() {}\r\n    \r\n    bubbleSort() {}\r\n\r\n    // testing() {\r\n    //     var max  = -1000;\r\n    //     var min = 1000;\r\n    //     for (let i = 0; i < 100; i ++){\r\n    //         const array = [];\r\n    //         const len = Math.floor(Math.random() * max + 1);\r\n    //         for (let j = 0; j < len; j ++){\r\n    //             array.push(Math.floor(Math.random() * max + min));\r\n    //         }\r\n    //         const jsarray = this.state.array.slice().sort((a, b) => a - b);\r\n    //         const sorted = Algorithms.mergeSort(this.state.array);\r\n    //         console.log(ifEqual(jsarray, sorted));\r\n    //     }\r\n    // }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n\r\n        return (\r\n            <div className = \"array-container\">\r\n                {array.map((value, index) => (\r\n                    <div className = \"array-bar\" key = {index} style = {{height: `${value}px`}}>\r\n                    </div>\r\n                ))}\r\n                <button onClick = {() => this.resetArray()}>Randomize Array!</button>\r\n                <button onClick = {() => this.mergeSort()}>Merge Sort</button>\r\n                <button onClick = {() => this.quickSort()}>Quick Sort</button>\r\n                <button onClick = {() => this.heapSort()}>HeapSort</button>\r\n                <button onClick = {() => this.bubbleSort()}>Bubble Sort</button>\r\n                <button onClick = {() => this.testing()}>Testing</button>\r\n            </div>\r\n        );\r\n    }  \r\n}\r\n\r\nfunction ifEqual(arr1, arr2) {\r\n    if (arr1.length != arr2.length) \r\n        return false;\r\n    for (let i = 0; i < arr1.length; i ++){\r\n        if(arr1[i] !== arr2[i])\r\n        return false;\r\n    }\r\n    return true;\r\n}"]},"metadata":{},"sourceType":"module"}