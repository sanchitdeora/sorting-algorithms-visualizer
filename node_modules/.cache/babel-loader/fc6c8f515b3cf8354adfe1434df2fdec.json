{"ast":null,"code":"export function getMergeSortAnimations(array) {\n  console.log(\"MERGINF STARTS WITH ARRAY: \");\n  console.log(array);\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIndex, endIndex, auxiliaryArray, animations) {\n  if (startIndex === endIndex) return;\n  const middleIndex = Math.floor((startIndex + endIndex) / 2);\n  mergeSortHelper(auxiliaryArray, startIndex, middleIndex, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIndex + 1, endIndex, mainArray, animations);\n  doMerge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations) {\n  let k = startIndex;\n  let i = startIndex;\n  let j = middleIndex + 1;\n\n  while (i <= middleIndex && j <= endIndex) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    console.log(\"PUSHING IN ANIMATION: \");\n    console.log([i, j]);\n    console.log([mainArray[i], mainArray[j]]);\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    console.log(\"PUSHING IN ANIMATION: \");\n    console.log([i, j]);\n    console.log([mainArray[i], mainArray[j]]);\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      console.log(\"PUSHING IN ANIMATION: \");\n      console.log([k, auxiliaryArray[i]]);\n      animations.push([k, auxiliaryArray[i]]);\n      console.log(\"Changing Values of mainArray with AuxiliaryArray: \");\n      console.log([mainArray[k], auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      console.log(\"PUSHING IN ANIMATION: \");\n      console.log([k, auxiliaryArray[j]]);\n      animations.push([k, auxiliaryArray[j]]);\n      console.log(\"Changing Values of mainArray with AuxiliaryArray: \");\n      console.log([mainArray[k], auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIndex) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    console.log(\"PUSHING IN ANIMATION TWICE: \");\n    console.log(i);\n    console.log(mainArray[i]);\n    animations.push([i, i]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    console.log(\"PUSHING IN ANIMATION TWICE: \");\n    console.log(i);\n    console.log(mainArray[i]);\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    console.log(\"PUSHING IN ANIMATION: \");\n    console.log([k, auxiliaryArray[i]]);\n    animations.push([k, auxiliaryArray[i]]);\n    console.log(\"Changing Values of mainArray with AuxiliaryArray: \");\n    console.log([mainArray[k], auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIndex) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    console.log(\"PUSHING IN ANIMATION TWICE: \");\n    console.log(j);\n    console.log(mainArray[j]);\n    animations.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    console.log(\"PUSHING IN ANIMATION TWICE: \");\n    console.log(j);\n    console.log(mainArray[j]);\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    console.log(\"PUSHING IN ANIMATION: \");\n    console.log([k, auxiliaryArray[j]]);\n    animations.push([k, auxiliaryArray[j]]);\n    console.log(\"Changing Values of mainArray with AuxiliaryArray: \");\n    console.log([mainArray[k], auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}","map":{"version":3,"sources":["C:/Sanchit/Projects/sorting-algorithms-visualizer/src/Algorithms/mergeSort.js"],"names":["getMergeSortAnimations","array","console","log","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIndex","endIndex","middleIndex","Math","floor","doMerge","k","i","j","push"],"mappings":"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","sourcesContent":["export function getMergeSortAnimations(array) {\r\n  console.log(\"MERGINF STARTS WITH ARRAY: \");\r\n  console.log(array);\r\n  const animations = [];\r\n  if (array.length <= 1) \r\n    return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIndex,\r\n  endIndex,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  if (startIndex === endIndex) \r\n    return;\r\n  const middleIndex = Math.floor((startIndex + endIndex) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIndex, middleIndex, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIndex + 1, endIndex, mainArray, animations);\r\n  doMerge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIndex,\r\n  middleIndex,\r\n  endIndex,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  let k = startIndex;\r\n  let i = startIndex;\r\n  let j = middleIndex + 1;\r\n  while (i <= middleIndex && j <= endIndex) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    console.log(\"PUSHING IN ANIMATION: \");\r\n    console.log([i,  j]);\r\n    console.log([mainArray[i], mainArray[j]]);\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    console.log(\"PUSHING IN ANIMATION: \");\r\n    console.log([i,  j]);\r\n    console.log([mainArray[i], mainArray[j]]);\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      console.log(\"PUSHING IN ANIMATION: \");\r\n      console.log([k, auxiliaryArray[i]]);\r\n      animations.push([k, auxiliaryArray[i]]);\r\n\r\n      console.log(\"Changing Values of mainArray with AuxiliaryArray: \");\r\n      console.log([mainArray[k], auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      console.log(\"PUSHING IN ANIMATION: \");\r\n      console.log([k, auxiliaryArray[j]]);\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      \r\n      console.log(\"Changing Values of mainArray with AuxiliaryArray: \");\r\n      console.log([mainArray[k], auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIndex) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    console.log(\"PUSHING IN ANIMATION TWICE: \");\r\n    console.log(i);\r\n    console.log(mainArray[i]);\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    console.log(\"PUSHING IN ANIMATION TWICE: \");\r\n    console.log(i);\r\n    console.log(mainArray[i]);\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    console.log(\"PUSHING IN ANIMATION: \");\r\n    console.log([k, auxiliaryArray[i]]);\r\n    animations.push([k, auxiliaryArray[i]]);\r\n\r\n    console.log(\"Changing Values of mainArray with AuxiliaryArray: \");\r\n    console.log([mainArray[k], auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIndex) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    console.log(\"PUSHING IN ANIMATION TWICE: \");\r\n    console.log(j);\r\n    console.log(mainArray[j]);\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    console.log(\"PUSHING IN ANIMATION TWICE: \");\r\n    console.log(j);\r\n    console.log(mainArray[j]);\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    console.log(\"PUSHING IN ANIMATION: \");\r\n    console.log([k, auxiliaryArray[j]]);\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    \r\n    console.log(\"Changing Values of mainArray with AuxiliaryArray: \");\r\n    console.log([mainArray[k], auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}