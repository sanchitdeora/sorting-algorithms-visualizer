{"ast":null,"code":"var _jsxFileName = \"C:\\\\Sanchit\\\\Projects\\\\sorting-algorithms-visualizer\\\\src\\\\Visualizer\\\\Visualizer.jsx\";\nimport React from 'react';\nimport * as Merge from '../Algorithms/mergeSort.js';\nimport * as Bubble from '../Algorithms/bubbleSort.js'; // import * as Algorithms from '../Algorithms/bubbleSort.js'\n\nimport './Visualizer.css'; // Change this value for the speed of the animations.\n\nconst ANIMATION_SPEED_MS = 1000; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 10; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'darkcyan'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'white';\nexport default class Visualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    var max = 500;\n    var min = 5;\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(Math.floor(Math.random() * max + min));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const animations = Merge.getMergeSortAnimations(this.state.array);\n    console.log(\"Final Animations: \" + animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIndex, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIndex].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {}\n\n  heapSort() {}\n\n  bubbleSort() {\n    const sortedArray = Bubble.getBubbleSort(this.state.array);\n  } // testing() {\n  //     var max  = -1000;\n  //     var min = 1000;\n  //     for (let i = 0; i < 100; i ++){\n  //         const array = [];\n  //         const len = Math.floor(Math.random() * max + 1);\n  //         for (let j = 0; j < len; j ++){\n  //             array.push(Math.floor(Math.random() * max + min));\n  //         }\n  //         const jsarray = this.state.array.slice().sort((a, b) => a - b);\n  //         const sorted = Algorithms.mergeSort(this.state.array);\n  //         console.log(ifEqual(jsarray, sorted));\n  //     }\n  // }\n\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"array-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, array.map((value, index) => React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: index,\n      style: {\n        height: `${value}px`\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"button-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Randomize Array!\"), React.createElement(\"button\", {\n      onClick: () => this.mergeSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Merge Sort\"), React.createElement(\"button\", {\n      onClick: () => this.quickSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Quick Sort\"), React.createElement(\"button\", {\n      onClick: () => this.heapSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"HeapSort\"), React.createElement(\"button\", {\n      onClick: () => this.bubbleSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Bubble Sort\"), React.createElement(\"button\", {\n      onClick: () => this.testing(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Testing\")));\n  }\n\n}\n\nfunction ifEqual(arr1, arr2) {\n  if (arr1.length != arr2.length) return false;\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["C:/Sanchit/Projects/sorting-algorithms-visualizer/src/Visualizer/Visualizer.jsx"],"names":["React","Merge","Bubble","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","Visualizer","Component","constructor","props","state","array","componentDidMount","resetArray","max","min","i","push","Math","floor","random","setState","mergeSort","animations","getMergeSortAnimations","console","log","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIndex","barTwoIndex","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","quickSort","heapSort","bubbleSort","sortedArray","getBubbleSort","render","map","value","index","testing","ifEqual","arr1","arr2"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport * as Merge from '../Algorithms/mergeSort.js'\r\nimport * as Bubble from '../Algorithms/bubbleSort.js'\r\n// import * as Algorithms from '../Algorithms/bubbleSort.js'\r\nimport './Visualizer.css';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 1000;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 10;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'darkcyan';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'white';\r\n\r\nexport default class Visualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        var max  = 500;\r\n        var min = 5;\r\n        for(let i = 0; i < NUMBER_OF_ARRAY_BARS; i ++) {\r\n            array.push(Math.floor(Math.random() * max + min));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    mergeSort() {   \r\n        const animations = Merge.getMergeSortAnimations(this.state.array);\r\n        console.log(\"Final Animations: \"+animations);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n              const [barOneIndex, barTwoIndex] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIndex].style;\r\n              const barTwoStyle = arrayBars[barTwoIndex].style;\r\n              const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n              setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n              }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n              setTimeout(() => {\r\n                const [barOneIndex, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                barOneStyle.height = `${newHeight}px`;\r\n              }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    quickSort() {}\r\n    \r\n    heapSort() {}\r\n    \r\n    bubbleSort() {\r\n        const sortedArray = Bubble.getBubbleSort(this.state.array);\r\n    }\r\n\r\n    // testing() {\r\n    //     var max  = -1000;\r\n    //     var min = 1000;\r\n    //     for (let i = 0; i < 100; i ++){\r\n    //         const array = [];\r\n    //         const len = Math.floor(Math.random() * max + 1);\r\n    //         for (let j = 0; j < len; j ++){\r\n    //             array.push(Math.floor(Math.random() * max + min));\r\n    //         }\r\n    //         const jsarray = this.state.array.slice().sort((a, b) => a - b);\r\n    //         const sorted = Algorithms.mergeSort(this.state.array);\r\n    //         console.log(ifEqual(jsarray, sorted));\r\n    //     }\r\n    // }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n\r\n        return (\r\n            <div className = \"array-container\">\r\n                {array.map((value, index) => (\r\n                    <div className = \"array-bar\" key = {index} style = {{height: `${value}px`}}>\r\n                    </div>\r\n                ))}\r\n                <div className = \"button-container\">\r\n                    <button onClick = {() => this.resetArray()}>Randomize Array!</button>  \r\n                    <button onClick = {() => this.mergeSort()}>Merge Sort</button>\r\n                    <button onClick = {() => this.quickSort()}>Quick Sort</button>\r\n                    <button onClick = {() => this.heapSort()}>HeapSort</button>\r\n                    <button onClick = {() => this.bubbleSort()}>Bubble Sort</button>\r\n                    <button onClick = {() => this.testing()}>Testing</button>\r\n                </div>\r\n            </div>    \r\n            \r\n        );\r\n    }  \r\n}\r\n\r\nfunction ifEqual(arr1, arr2) {\r\n    if (arr1.length != arr2.length) \r\n        return false;\r\n    for (let i = 0; i < arr1.length; i ++){\r\n        if(arr1[i] !== arr2[i])\r\n        return false;\r\n    }\r\n    return true;\r\n}"]},"metadata":{},"sourceType":"module"}