{"ast":null,"code":"import { getMergeSortAnimations } from \"./mergeSort\";\nexport function getHeapSort(array) {\n  const auxiliaryArray = array.slice(0);\n  const animations = [];\n  sort(auxiliaryArray);\n  return auxiliaryArray;\n}\n\nfunction sort(auxiliaryArray) {\n  const len = auxiliaryArray.length;\n  var temp;\n\n  for (let i = Math.floor(len / 2 - 1); i >= 0; i--) {\n    heapify(auxiliaryArray, len, i);\n  }\n\n  for (let i = len - 1; i >= 0; i--) {\n    temp = auxiliaryArray[i];\n    auxiliaryArray[i] = auxiliaryArray[0];\n    auxiliaryArray[0] = temp;\n    heapify(auxiliaryArray, i, 0);\n  }\n}\n\nfunction heapify(auxiliaryArray, n, i) {\n  var temp;\n  var largest = i;\n  var l = i * 2 + 1;\n  var r = i * 2 + 2;\n\n  if (l < n && auxiliaryArray[l] > auxiliaryArray[largest]) {\n    largest = l;\n  }\n\n  if (r < n && auxiliaryArray[r] > auxiliaryArray[largest]) {\n    largest = r;\n  }\n\n  if (largest != i) {\n    temp = auxiliaryArray[largest];\n    auxiliaryArray[largest] = auxiliaryArray[i];\n    auxiliaryArray[i] = temp;\n    heapify(auxiliaryArray, n, largest);\n  }\n}","map":{"version":3,"sources":["C:/Sanchit/Projects/sorting-algorithms-visualizer/src/Algorithms/heapSort.js"],"names":["getMergeSortAnimations","getHeapSort","array","auxiliaryArray","slice","animations","sort","len","length","temp","i","Math","floor","heapify","n","largest","l","r"],"mappings":"AAAA,SAASA,sBAAT,QAAuC,aAAvC;AAEA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC/B,QAAMC,cAAc,GAAGD,KAAK,CAACE,KAAN,CAAY,CAAZ,CAAvB;AACA,QAAMC,UAAU,GAAG,EAAnB;AACAC,EAAAA,IAAI,CAACH,cAAD,CAAJ;AACA,SAAOA,cAAP;AACH;;AAED,SAASG,IAAT,CAAcH,cAAd,EAA8B;AAC1B,QAAMI,GAAG,GAAGJ,cAAc,CAACK,MAA3B;AACA,MAAIC,IAAJ;;AACA,OAAI,IAAIC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAYL,GAAG,GAAG,CAAP,GAAY,CAAvB,CAAZ,EAAuCG,CAAC,IAAI,CAA5C,EAA+CA,CAAC,EAAhD,EAAqD;AAEjDG,IAAAA,OAAO,CAACV,cAAD,EAAiBI,GAAjB,EAAsBG,CAAtB,CAAP;AACH;;AAED,OAAI,IAAIA,CAAC,GAAGH,GAAG,GAAG,CAAlB,EAAqBG,CAAC,IAAI,CAA1B,EAA6BA,CAAC,EAA9B,EAAmC;AAC/BD,IAAAA,IAAI,GAAGN,cAAc,CAACO,CAAD,CAArB;AACAP,IAAAA,cAAc,CAACO,CAAD,CAAd,GAAoBP,cAAc,CAAC,CAAD,CAAlC;AACAA,IAAAA,cAAc,CAAC,CAAD,CAAd,GAAoBM,IAApB;AAEAI,IAAAA,OAAO,CAACV,cAAD,EAAiBO,CAAjB,EAAoB,CAApB,CAAP;AACH;AACJ;;AAED,SAASG,OAAT,CAAiBV,cAAjB,EAAiCW,CAAjC,EAAoCJ,CAApC,EAAuC;AACnC,MAAID,IAAJ;AACA,MAAIM,OAAO,GAAGL,CAAd;AACA,MAAIM,CAAC,GAAIN,CAAC,GAAG,CAAL,GAAU,CAAlB;AACA,MAAIO,CAAC,GAAIP,CAAC,GAAG,CAAL,GAAU,CAAlB;;AAEA,MAAGM,CAAC,GAAGF,CAAJ,IAASX,cAAc,CAACa,CAAD,CAAd,GAAoBb,cAAc,CAACY,OAAD,CAA9C,EAAwD;AACpDA,IAAAA,OAAO,GAAGC,CAAV;AACH;;AACD,MAAGC,CAAC,GAAGH,CAAJ,IAASX,cAAc,CAACc,CAAD,CAAd,GAAoBd,cAAc,CAACY,OAAD,CAA9C,EAAwD;AACpDA,IAAAA,OAAO,GAAGE,CAAV;AACH;;AAED,MAAGF,OAAO,IAAIL,CAAd,EAAiB;AACbD,IAAAA,IAAI,GAAGN,cAAc,CAACY,OAAD,CAArB;AACAZ,IAAAA,cAAc,CAACY,OAAD,CAAd,GAA0BZ,cAAc,CAACO,CAAD,CAAxC;AACAP,IAAAA,cAAc,CAACO,CAAD,CAAd,GAAoBD,IAApB;AAEAI,IAAAA,OAAO,CAACV,cAAD,EAAiBW,CAAjB,EAAoBC,OAApB,CAAP;AACH;AACJ","sourcesContent":["import { getMergeSortAnimations } from \"./mergeSort\";\r\n\r\nexport function getHeapSort(array) {\r\n    const auxiliaryArray = array.slice(0);\r\n    const animations = [];\r\n    sort(auxiliaryArray);\r\n    return auxiliaryArray;\r\n}\r\n\r\nfunction sort(auxiliaryArray) {\r\n    const len = auxiliaryArray.length;\r\n    var temp;\r\n    for(let i = Math.floor((len / 2) - 1); i >= 0; i --) {\r\n        \r\n        heapify(auxiliaryArray, len, i);\r\n    }\r\n\r\n    for(let i = len - 1; i >= 0; i --) {\r\n        temp = auxiliaryArray[i];\r\n        auxiliaryArray[i] = auxiliaryArray[0];\r\n        auxiliaryArray[0] = temp;\r\n\r\n        heapify(auxiliaryArray, i, 0);\r\n    }\r\n}\r\n\r\nfunction heapify(auxiliaryArray, n, i) {\r\n    var temp;\r\n    var largest = i;\r\n    var l = (i * 2) + 1;\r\n    var r = (i * 2) + 2;\r\n\r\n    if(l < n && auxiliaryArray[l] > auxiliaryArray[largest]){\r\n        largest = l;\r\n    }\r\n    if(r < n && auxiliaryArray[r] > auxiliaryArray[largest]){\r\n        largest = r;\r\n    }\r\n\r\n    if(largest != i) {\r\n        temp = auxiliaryArray[largest];\r\n        auxiliaryArray[largest] = auxiliaryArray[i];\r\n        auxiliaryArray[i] = temp;\r\n\r\n        heapify(auxiliaryArray, n, largest);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}