{"ast":null,"code":"export const mergeSort = array => {\n  if (array.length == 1) return array;\n  const mid = Math.floor(array.length / 2);\n  const first = mergeSort(array.slice(0, mid));\n  const second = mergeSort(array.slice(mid));\n  const sorted = [];\n  let i = 0,\n      j = 0;\n\n  while (i < first.length && j < second.length) {\n    if (first[i] < second[j]) {\n      sorted.push(first[i++]);\n    } else {\n      sorted.push(second[j++]);\n    }\n  }\n\n  while (i < first.length) sorted.push(first[i++]);\n\n  while (j < second.length) sorted.push(second[j++]);\n\n  return sorted;\n};","map":{"version":3,"sources":["C:/Sanchit/Projects/sorting-algorithms-visualizer/src/Algorithms/mergeSort.js"],"names":["mergeSort","array","length","mid","Math","floor","first","slice","second","sorted","i","j","push"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAGC,KAAK,IAAI;AAC9B,MAAIA,KAAK,CAACC,MAAN,IAAgB,CAApB,EAAuB,OAAOD,KAAP;AACvB,QAAME,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACC,MAAN,GAAe,CAA1B,CAAZ;AACA,QAAMI,KAAK,GAAGN,SAAS,CAACC,KAAK,CAACM,KAAN,CAAY,CAAZ,EAAeJ,GAAf,CAAD,CAAvB;AACA,QAAMK,MAAM,GAAGR,SAAS,CAACC,KAAK,CAACM,KAAN,CAAYJ,GAAZ,CAAD,CAAxB;AACA,QAAMM,MAAM,GAAG,EAAf;AACA,MAAIC,CAAC,GAAG,CAAR;AAAA,MAAWC,CAAC,GAAG,CAAf;;AACA,SAAMD,CAAC,GAAGJ,KAAK,CAACJ,MAAV,IAAoBS,CAAC,GAAGH,MAAM,CAACN,MAArC,EAA6C;AACzC,QAAII,KAAK,CAACI,CAAD,CAAL,GAAWF,MAAM,CAACG,CAAD,CAArB,EAA0B;AACtBF,MAAAA,MAAM,CAACG,IAAP,CAAYN,KAAK,CAACI,CAAC,EAAF,CAAjB;AACH,KAFD,MAEO;AACHD,MAAAA,MAAM,CAACG,IAAP,CAAYJ,MAAM,CAACG,CAAC,EAAF,CAAlB;AACH;AACJ;;AACD,SAAMD,CAAC,GAAGJ,KAAK,CAACJ,MAAhB,EACIO,MAAM,CAACG,IAAP,CAAYN,KAAK,CAACI,CAAC,EAAF,CAAjB;;AACJ,SAAMC,CAAC,GAAGH,MAAM,CAACN,MAAjB,EACIO,MAAM,CAACG,IAAP,CAAYJ,MAAM,CAACG,CAAC,EAAF,CAAlB;;AACJ,SAAOF,MAAP;AACH,CAnBM","sourcesContent":["export const mergeSort = array => {\r\n    if (array.length == 1) return array;\r\n    const mid = Math.floor(array.length / 2);\r\n    const first = mergeSort(array.slice(0, mid));\r\n    const second = mergeSort(array.slice(mid));\r\n    const sorted = [];\r\n    let i = 0, j = 0;    \r\n    while(i < first.length && j < second.length) {\r\n        if (first[i] < second[j]) {\r\n            sorted.push(first[i++]);\r\n        } else {\r\n            sorted.push(second[j++]);\r\n        }\r\n    }\r\n    while(i < first.length)\r\n        sorted.push(first[i++]);\r\n    while(j < second.length)\r\n        sorted.push(second[j++]);\r\n    return sorted;\r\n}   "]},"metadata":{},"sourceType":"module"}